{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1xaDjf87yo0k7yNt3pMNxT0FDOhantCs3",
      "authorship_tag": "ABX9TyNv2spmM/h8YyehG5VOIASR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Joshuaiwuoha/Analytics-projects-/blob/main/remittance.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BduG__mJ33eI"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_rows', 100)"
      ],
      "metadata": {
        "id": "U42tcE6c5FHx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fdi_df = pd.read_csv('/content/drive/MyDrive/datasets/fdi_inflow_data.csv', skiprows = 4)\n",
        "gdp_df = pd.read_csv('/content/drive/MyDrive/datasets/gdp_data.csv', skiprows = 4)\n",
        "mig_df =  pd.read_csv('/content/drive/MyDrive/datasets/migration_data.csv', skiprows = 4)\n",
        "pop_df =  pd.read_csv('/content/drive/MyDrive/datasets/population_data.csv', skiprows = 4)\n",
        "rem_paid = pd.read_csv('/content/drive/MyDrive/datasets/remittances_paid_data.csv', skiprows = 4)\n",
        "rem_rec = pd.read_csv('/content/drive/MyDrive/datasets/remittances_received_data.csv', skiprows = 4)\n",
        "unemp_df = pd.read_csv('/content/drive/MyDrive/datasets/unemployment_data.csv', skiprows = 4)"
      ],
      "metadata": {
        "id": "ZVodwWr23635"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for each in [fdi_df,gdp_df,mig_df,pop_df,rem_paid,rem_rec,unemp_df]:\n",
        "  each = each.drop('Unnamed: 67', axis = 1, inplace = True)\n"
      ],
      "metadata": {
        "id": "mOkdFRH9TDr_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#list of African countries\n",
        "list_of_countries = ['Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cabo Verde',\n",
        "           'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo, Dem. Rep.', 'Congo, Rep.', 'Cote d\\'Ivoire',\n",
        "           'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Gabon', 'Gambia, The', 'Ghana', 'Guinea',\n",
        "           'Guinea-Bissau', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique',\n",
        "           'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa',\n",
        "           'South Sudan', 'Sudan', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe']\n",
        "\n",
        "# #years with extremely large quantity of null values\n",
        "# years_list = ['1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972',\n",
        "#               '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985',\n",
        "#               '1986', '1987', '1988', '1989', '1990', 'Unnamed: 67']"
      ],
      "metadata": {
        "id": "BsJGx_sE-vGL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def melt_dataframe(input_df, id_vars, var_name = 'year', value_name = 'value'):\n",
        "\n",
        "    melted_df = pd.melt(input_df, id_vars=id_vars, var_name=var_name, value_name=value_name)\n",
        "    melted_df.columns = melted_df.columns.str.lower()\n",
        "    melted_df = melted_df[melted_df['country name'].isin(list_of_countries)]\n",
        "    return melted_df\n",
        "\n"
      ],
      "metadata": {
        "id": "U6hhj7K4Nraq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def empty(df,  value_name):\n",
        "  new = df.groupby('year')[value_name].apply(lambda x: x.isnull().sum()).reset_index(name ='empty_values_count' )\n",
        "  return new"
      ],
      "metadata": {
        "id": "Vb3pbvewOq1O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fdi_df = melt_dataframe(fdi_df, fdi_df.columns[0:4], value_name = 'fdi_value')\n"
      ],
      "metadata": {
        "id": "-OrFwoQC7tji"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fdi_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "2OO2EEan9jz6",
        "outputId": "9e6b9fcb-5f04-4b40-aa32-3d83f37d1148"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code  \\\n",
              "4         Angola          AGO   \n",
              "16       Burundi          BDI   \n",
              "18         Benin          BEN   \n",
              "19  Burkina Faso          BFA   \n",
              "33      Botswana          BWA   \n",
              "\n",
              "                                       indicator name     indicator code  \\\n",
              "4   Foreign direct investment, net inflows (BoP, c...  BX.KLT.DINV.CD.WD   \n",
              "16  Foreign direct investment, net inflows (BoP, c...  BX.KLT.DINV.CD.WD   \n",
              "18  Foreign direct investment, net inflows (BoP, c...  BX.KLT.DINV.CD.WD   \n",
              "19  Foreign direct investment, net inflows (BoP, c...  BX.KLT.DINV.CD.WD   \n",
              "33  Foreign direct investment, net inflows (BoP, c...  BX.KLT.DINV.CD.WD   \n",
              "\n",
              "    year  fdi_value  \n",
              "4   1960        NaN  \n",
              "16  1960        NaN  \n",
              "18  1960        NaN  \n",
              "19  1960        NaN  \n",
              "33  1960        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ccf9c7fd-076f-4945-bc6b-78e35d978a0c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>fdi_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Foreign direct investment, net inflows (BoP, c...</td>\n",
              "      <td>BX.KLT.DINV.CD.WD</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Foreign direct investment, net inflows (BoP, c...</td>\n",
              "      <td>BX.KLT.DINV.CD.WD</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Foreign direct investment, net inflows (BoP, c...</td>\n",
              "      <td>BX.KLT.DINV.CD.WD</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Foreign direct investment, net inflows (BoP, c...</td>\n",
              "      <td>BX.KLT.DINV.CD.WD</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Foreign direct investment, net inflows (BoP, c...</td>\n",
              "      <td>BX.KLT.DINV.CD.WD</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ccf9c7fd-076f-4945-bc6b-78e35d978a0c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ccf9c7fd-076f-4945-bc6b-78e35d978a0c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ccf9c7fd-076f-4945-bc6b-78e35d978a0c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-54602e67-8d55-49e8-92e4-e1932fa4b5f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54602e67-8d55-49e8-92e4-e1932fa4b5f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-54602e67-8d55-49e8-92e4-e1932fa4b5f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fdi_emp = empty(fdi_df, 'fdi_value')"
      ],
      "metadata": {
        "id": "yB8Nyo9WOw7w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fdi_emp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ySS-QfHtPLuR",
        "outputId": "695e1059-10a5-4a14-bdbb-d130770aa100"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    year  empty_values_count\n",
              "0   1960                  53\n",
              "1   1961                  53\n",
              "2   1962                  53\n",
              "3   1963                  53\n",
              "4   1964                  53\n",
              "5   1965                  53\n",
              "6   1966                  53\n",
              "7   1967                  53\n",
              "8   1968                  53\n",
              "9   1969                  53\n",
              "10  1970                  15\n",
              "11  1971                  16\n",
              "12  1972                  13\n",
              "13  1973                  11\n",
              "14  1974                   9\n",
              "15  1975                   7\n",
              "16  1976                   8\n",
              "17  1977                   7\n",
              "18  1978                   4\n",
              "19  1979                   5\n",
              "20  1980                   5\n",
              "21  1981                   4\n",
              "22  1982                   3\n",
              "23  1983                   3\n",
              "24  1984                   3\n",
              "25  1985                   2\n",
              "26  1986                   2\n",
              "27  1987                   2\n",
              "28  1988                   2\n",
              "29  1989                   2\n",
              "30  1990                   2\n",
              "31  1991                   3\n",
              "32  1992                   2\n",
              "33  1993                   1\n",
              "34  1994                   2\n",
              "35  1995                   2\n",
              "36  1996                   1\n",
              "37  1997                   1\n",
              "38  1998                   1\n",
              "39  1999                   1\n",
              "40  2000                   1\n",
              "41  2001                   1\n",
              "42  2002                   1\n",
              "43  2003                   1\n",
              "44  2004                   1\n",
              "45  2005                   1\n",
              "46  2006                   1\n",
              "47  2007                   1\n",
              "48  2008                   1\n",
              "49  2009                   1\n",
              "50  2010                   1\n",
              "51  2011                   1\n",
              "52  2012                   0\n",
              "53  2013                   0\n",
              "54  2014                   0\n",
              "55  2015                   0\n",
              "56  2016                   0\n",
              "57  2017                   0\n",
              "58  2018                   0\n",
              "59  2019                   0\n",
              "60  2020                   0\n",
              "61  2021                   1\n",
              "62  2022                   1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fcd34f75-22a7-4b52-8f7c-191d5a82b737\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>empty_values_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1960</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1961</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1962</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1963</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1964</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1965</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1966</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1967</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1968</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1969</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1970</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1971</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1972</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1973</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1974</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1975</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1976</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1977</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1978</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1979</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1980</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1981</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1982</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1983</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1984</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1985</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1987</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1988</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1989</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1990</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1991</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1992</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1993</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>1994</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1995</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1996</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1997</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1999</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>2001</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>2002</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>2003</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>2004</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>2005</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>2006</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>2007</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2011</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2012</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2013</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2014</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2015</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>2016</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>2017</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2018</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2019</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2020</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>2022</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcd34f75-22a7-4b52-8f7c-191d5a82b737')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fcd34f75-22a7-4b52-8f7c-191d5a82b737 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fcd34f75-22a7-4b52-8f7c-191d5a82b737');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-82cb2177-9a84-4133-b284-cb86233c6432\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82cb2177-9a84-4133-b284-cb86233c6432')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-82cb2177-9a84-4133-b284-cb86233c6432 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bcab3b75-d01e-428a-a877-b132a3930d27\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fdi_emp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bcab3b75-d01e-428a-a877-b132a3930d27 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('fdi_emp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gdp_df = melt_dataframe(gdp_df, gdp_df.columns[0:4], value_name = 'gdp_value')\n"
      ],
      "metadata": {
        "id": "cR4IqtDEBQ-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdp_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "x1gK1fQ8DZ1a",
        "outputId": "eab11293-3420-451f-d9b6-829daf505278"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code     indicator name  indicator code  year  \\\n",
              "4         Angola          AGO  GDP (current LCU)  NY.GDP.MKTP.CN  1960   \n",
              "16       Burundi          BDI  GDP (current LCU)  NY.GDP.MKTP.CN  1960   \n",
              "18         Benin          BEN  GDP (current LCU)  NY.GDP.MKTP.CN  1960   \n",
              "19  Burkina Faso          BFA  GDP (current LCU)  NY.GDP.MKTP.CN  1960   \n",
              "33      Botswana          BWA  GDP (current LCU)  NY.GDP.MKTP.CN  1960   \n",
              "\n",
              "       gdp_value  \n",
              "4            NaN  \n",
              "16  9.800000e+09  \n",
              "18  5.546205e+10  \n",
              "19  8.102296e+10  \n",
              "33  2.169310e+07  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-067496c8-2333-475e-9d88-681426506508\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>gdp_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>GDP (current LCU)</td>\n",
              "      <td>NY.GDP.MKTP.CN</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>GDP (current LCU)</td>\n",
              "      <td>NY.GDP.MKTP.CN</td>\n",
              "      <td>1960</td>\n",
              "      <td>9.800000e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>GDP (current LCU)</td>\n",
              "      <td>NY.GDP.MKTP.CN</td>\n",
              "      <td>1960</td>\n",
              "      <td>5.546205e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>GDP (current LCU)</td>\n",
              "      <td>NY.GDP.MKTP.CN</td>\n",
              "      <td>1960</td>\n",
              "      <td>8.102296e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>GDP (current LCU)</td>\n",
              "      <td>NY.GDP.MKTP.CN</td>\n",
              "      <td>1960</td>\n",
              "      <td>2.169310e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-067496c8-2333-475e-9d88-681426506508')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-067496c8-2333-475e-9d88-681426506508 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-067496c8-2333-475e-9d88-681426506508');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-28fddd9f-f227-428f-b3ab-d61d3b846fa4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28fddd9f-f227-428f-b3ab-d61d3b846fa4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-28fddd9f-f227-428f-b3ab-d61d3b846fa4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gdp_emp = empty(gdp_df, 'gdp_value')"
      ],
      "metadata": {
        "id": "2uuAn3OwP292"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gdp_emp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wXxAz3PjFxtJ",
        "outputId": "846237a2-1649-4753-eab9-98a278521559"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    year  empty_values_count\n",
              "0   1960                  22\n",
              "1   1961                  21\n",
              "2   1962                  20\n",
              "3   1963                  20\n",
              "4   1964                  20\n",
              "5   1965                  19\n",
              "6   1966                  18\n",
              "7   1967                  17\n",
              "8   1968                  17\n",
              "9   1969                  17\n",
              "10  1970                  16\n",
              "11  1971                  16\n",
              "12  1972                  16\n",
              "13  1973                  16\n",
              "14  1974                  16\n",
              "15  1975                  16\n",
              "16  1976                  15\n",
              "17  1977                  15\n",
              "18  1978                  16\n",
              "19  1979                  16\n",
              "20  1980                  10\n",
              "21  1981                   9\n",
              "22  1982                   9\n",
              "23  1983                   9\n",
              "24  1984                   9\n",
              "25  1985                   8\n",
              "26  1986                   8\n",
              "27  1987                   7\n",
              "28  1988                   6\n",
              "29  1989                   6\n",
              "30  1990                   5\n",
              "31  1991                   5\n",
              "32  1992                   4\n",
              "33  1993                   4\n",
              "34  1994                   4\n",
              "35  1995                   4\n",
              "36  1996                   4\n",
              "37  1997                   4\n",
              "38  1998                   4\n",
              "39  1999                   4\n",
              "40  2000                   3\n",
              "41  2001                   2\n",
              "42  2002                   2\n",
              "43  2003                   2\n",
              "44  2004                   2\n",
              "45  2005                   2\n",
              "46  2006                   2\n",
              "47  2007                   2\n",
              "48  2008                   1\n",
              "49  2009                   1\n",
              "50  2010                   1\n",
              "51  2011                   1\n",
              "52  2012                   2\n",
              "53  2013                   1\n",
              "54  2014                   1\n",
              "55  2015                   1\n",
              "56  2016                   2\n",
              "57  2017                   2\n",
              "58  2018                   2\n",
              "59  2019                   2\n",
              "60  2020                   2\n",
              "61  2021                   2\n",
              "62  2022                   2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc267f73-2463-4418-8b2c-633459037122\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>empty_values_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1960</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1961</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1962</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1963</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1964</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1965</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1966</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1967</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1968</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1969</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1970</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1971</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1972</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1973</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1974</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1975</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1976</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1977</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1978</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1979</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1980</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1981</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1982</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1983</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1984</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1985</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1986</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1987</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1988</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1989</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1990</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1991</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1992</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1993</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>1994</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1995</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1996</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1997</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1999</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>2001</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>2002</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>2003</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>2004</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>2005</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>2006</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>2007</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2011</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2012</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2014</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>2016</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>2017</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2019</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2020</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>2021</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc267f73-2463-4418-8b2c-633459037122')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc267f73-2463-4418-8b2c-633459037122 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc267f73-2463-4418-8b2c-633459037122');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6cf20bc-9632-40c5-99cc-21cca077fe3e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6cf20bc-9632-40c5-99cc-21cca077fe3e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6cf20bc-9632-40c5-99cc-21cca077fe3e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_70bd74f6-1c26-43a7-a4ff-d1d6abd76fef\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gdp_emp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_70bd74f6-1c26-43a7-a4ff-d1d6abd76fef button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gdp_emp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mig_df = melt_dataframe(mig_df, mig_df.columns[0:4], value_name = 'mig_value')\n"
      ],
      "metadata": {
        "id": "k5AEvm5mKP1m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mig_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uHhEU0XHK4LV",
        "outputId": "0d205870-0248-451d-9660-7f5efd328e2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code indicator name indicator code  year  mig_value\n",
              "4         Angola          AGO  Net migration    SM.POP.NETM  1960   -43749.0\n",
              "16       Burundi          BDI  Net migration    SM.POP.NETM  1960   -14647.0\n",
              "18         Benin          BEN  Net migration    SM.POP.NETM  1960    -4725.0\n",
              "19  Burkina Faso          BFA  Net migration    SM.POP.NETM  1960   -23329.0\n",
              "33      Botswana          BWA  Net migration    SM.POP.NETM  1960    -4329.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6664059-25f9-498a-a316-568430304d34\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>mig_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Net migration</td>\n",
              "      <td>SM.POP.NETM</td>\n",
              "      <td>1960</td>\n",
              "      <td>-43749.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Net migration</td>\n",
              "      <td>SM.POP.NETM</td>\n",
              "      <td>1960</td>\n",
              "      <td>-14647.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Net migration</td>\n",
              "      <td>SM.POP.NETM</td>\n",
              "      <td>1960</td>\n",
              "      <td>-4725.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Net migration</td>\n",
              "      <td>SM.POP.NETM</td>\n",
              "      <td>1960</td>\n",
              "      <td>-23329.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Net migration</td>\n",
              "      <td>SM.POP.NETM</td>\n",
              "      <td>1960</td>\n",
              "      <td>-4329.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6664059-25f9-498a-a316-568430304d34')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6664059-25f9-498a-a316-568430304d34 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6664059-25f9-498a-a316-568430304d34');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f6e00a85-4a13-434e-b2be-8a0573bf823b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6e00a85-4a13-434e-b2be-8a0573bf823b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f6e00a85-4a13-434e-b2be-8a0573bf823b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mig_emp = empty(mig_df, 'mig_value')"
      ],
      "metadata": {
        "id": "lcEqMn7QMbBz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mig_emp"
      ],
      "metadata": {
        "id": "ew1lqzv4QftH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pop_df = melt_dataframe(pop_df, pop_df.columns[0:4], value_name = 'pop_value')\n"
      ],
      "metadata": {
        "id": "22W0epR-MiRt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pop_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WG0mMhITNDQP",
        "outputId": "ca5ee4f2-f372-4678-a6ac-994ee45b00df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code     indicator name indicator code  year  \\\n",
              "4         Angola          AGO  Population, total    SP.POP.TOTL  1960   \n",
              "16       Burundi          BDI  Population, total    SP.POP.TOTL  1960   \n",
              "18         Benin          BEN  Population, total    SP.POP.TOTL  1960   \n",
              "19  Burkina Faso          BFA  Population, total    SP.POP.TOTL  1960   \n",
              "33      Botswana          BWA  Population, total    SP.POP.TOTL  1960   \n",
              "\n",
              "    pop_value  \n",
              "4   5357195.0  \n",
              "16  2746628.0  \n",
              "18  2512284.0  \n",
              "19  4783259.0  \n",
              "33   512865.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c19efa3e-d061-4149-83eb-c615abe38db3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>pop_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>1960</td>\n",
              "      <td>5357195.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>1960</td>\n",
              "      <td>2746628.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>1960</td>\n",
              "      <td>2512284.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>1960</td>\n",
              "      <td>4783259.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Population, total</td>\n",
              "      <td>SP.POP.TOTL</td>\n",
              "      <td>1960</td>\n",
              "      <td>512865.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c19efa3e-d061-4149-83eb-c615abe38db3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c19efa3e-d061-4149-83eb-c615abe38db3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c19efa3e-d061-4149-83eb-c615abe38db3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-14a88bb3-b164-40f6-8585-700edcc182bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14a88bb3-b164-40f6-8585-700edcc182bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-14a88bb3-b164-40f6-8585-700edcc182bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pop_emp = empty(pop_df, 'pop_value')"
      ],
      "metadata": {
        "id": "88vcnGgkREoZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pop_emp"
      ],
      "metadata": {
        "id": "ysNGWNOaRKja"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_paid= melt_dataframe(rem_paid, rem_paid.columns[0:4], value_name = 'rem_paid_value')\n"
      ],
      "metadata": {
        "id": "pds0knZVO4q2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_paid.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Nna5ihKwF7zn",
        "outputId": "b053379b-b2ba-472b-c756-a53390e8b5d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code                            indicator name  \\\n",
              "4         Angola          AGO  Personal remittances, paid (current US$)   \n",
              "16       Burundi          BDI  Personal remittances, paid (current US$)   \n",
              "18         Benin          BEN  Personal remittances, paid (current US$)   \n",
              "19  Burkina Faso          BFA  Personal remittances, paid (current US$)   \n",
              "33      Botswana          BWA  Personal remittances, paid (current US$)   \n",
              "\n",
              "       indicator code  year  rem_paid_value  \n",
              "4   BM.TRF.PWKR.CD.DT  1960             NaN  \n",
              "16  BM.TRF.PWKR.CD.DT  1960             NaN  \n",
              "18  BM.TRF.PWKR.CD.DT  1960             NaN  \n",
              "19  BM.TRF.PWKR.CD.DT  1960             NaN  \n",
              "33  BM.TRF.PWKR.CD.DT  1960             NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7aedee53-44f8-41e5-8d3d-116950f3ffd8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>rem_paid_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Personal remittances, paid (current US$)</td>\n",
              "      <td>BM.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Personal remittances, paid (current US$)</td>\n",
              "      <td>BM.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Personal remittances, paid (current US$)</td>\n",
              "      <td>BM.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Personal remittances, paid (current US$)</td>\n",
              "      <td>BM.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Personal remittances, paid (current US$)</td>\n",
              "      <td>BM.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7aedee53-44f8-41e5-8d3d-116950f3ffd8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7aedee53-44f8-41e5-8d3d-116950f3ffd8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7aedee53-44f8-41e5-8d3d-116950f3ffd8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c70c495b-32c7-478c-ab01-b38edec957e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c70c495b-32c7-478c-ab01-b38edec957e3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c70c495b-32c7-478c-ab01-b38edec957e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rem_emp = empty(rem_paid,'rem_paid_value')"
      ],
      "metadata": {
        "id": "muCfxnMGJgOR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_emp"
      ],
      "metadata": {
        "id": "VKJNr_hmJqHj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_rec= melt_dataframe(rem_rec, rem_rec.columns[0:4],value_name = 'rem_rec_value' )"
      ],
      "metadata": {
        "id": "q3TekAT7Jry3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_rec.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "m6EZBEh2SIsn",
        "outputId": "686ea200-1b39-4e0b-be91-b0c544247ac8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code                                indicator name  \\\n",
              "4         Angola          AGO  Personal remittances, received (current US$)   \n",
              "16       Burundi          BDI  Personal remittances, received (current US$)   \n",
              "18         Benin          BEN  Personal remittances, received (current US$)   \n",
              "19  Burkina Faso          BFA  Personal remittances, received (current US$)   \n",
              "33      Botswana          BWA  Personal remittances, received (current US$)   \n",
              "\n",
              "       indicator code  year  rem_rec_value  \n",
              "4   BX.TRF.PWKR.CD.DT  1960            NaN  \n",
              "16  BX.TRF.PWKR.CD.DT  1960            NaN  \n",
              "18  BX.TRF.PWKR.CD.DT  1960            NaN  \n",
              "19  BX.TRF.PWKR.CD.DT  1960            NaN  \n",
              "33  BX.TRF.PWKR.CD.DT  1960            NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-363174fa-50bd-4691-ab53-e34c73d34589\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>rem_rec_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Personal remittances, received (current US$)</td>\n",
              "      <td>BX.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Personal remittances, received (current US$)</td>\n",
              "      <td>BX.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Personal remittances, received (current US$)</td>\n",
              "      <td>BX.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Personal remittances, received (current US$)</td>\n",
              "      <td>BX.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Personal remittances, received (current US$)</td>\n",
              "      <td>BX.TRF.PWKR.CD.DT</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-363174fa-50bd-4691-ab53-e34c73d34589')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-363174fa-50bd-4691-ab53-e34c73d34589 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-363174fa-50bd-4691-ab53-e34c73d34589');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9258ac5e-9d74-44b5-aead-0271d2afd9d0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9258ac5e-9d74-44b5-aead-0271d2afd9d0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9258ac5e-9d74-44b5-aead-0271d2afd9d0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rem_rec_emp = empty(rem_rec,  'rem_rec_value')"
      ],
      "metadata": {
        "id": "dkcXL2gCLxvm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rem_rec_emp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cmZd-sa4SOvy",
        "outputId": "3fabce38-1301-4702-8ffb-38d2ad7c7f7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    year  empty_values_count\n",
              "0   1960                  53\n",
              "1   1961                  53\n",
              "2   1962                  53\n",
              "3   1963                  53\n",
              "4   1964                  53\n",
              "5   1965                  53\n",
              "6   1966                  53\n",
              "7   1967                  53\n",
              "8   1968                  53\n",
              "9   1969                  53\n",
              "10  1970                  50\n",
              "11  1971                  50\n",
              "12  1972                  50\n",
              "13  1973                  50\n",
              "14  1974                  43\n",
              "15  1975                  37\n",
              "16  1976                  35\n",
              "17  1977                  29\n",
              "18  1978                  24\n",
              "19  1979                  23\n",
              "20  1980                  19\n",
              "21  1981                  19\n",
              "22  1982                  19\n",
              "23  1983                  19\n",
              "24  1984                  21\n",
              "25  1985                  20\n",
              "26  1986                  19\n",
              "27  1987                  19\n",
              "28  1988                  18\n",
              "29  1989                  17\n",
              "30  1990                  17\n",
              "31  1991                  17\n",
              "32  1992                  15\n",
              "33  1993                  15\n",
              "34  1994                  14\n",
              "35  1995                  15\n",
              "36  1996                  15\n",
              "37  1997                  16\n",
              "38  1998                  15\n",
              "39  1999                  15\n",
              "40  2000                  14\n",
              "41  2001                  15\n",
              "42  2002                  15\n",
              "43  2003                  12\n",
              "44  2004                  10\n",
              "45  2005                   4\n",
              "46  2006                   4\n",
              "47  2007                   4\n",
              "48  2008                   4\n",
              "49  2009                   4\n",
              "50  2010                   4\n",
              "51  2011                   4\n",
              "52  2012                   4\n",
              "53  2013                   4\n",
              "54  2014                   4\n",
              "55  2015                   4\n",
              "56  2016                   4\n",
              "57  2017                   4\n",
              "58  2018                   4\n",
              "59  2019                   4\n",
              "60  2020                   4\n",
              "61  2021                   4\n",
              "62  2022                   5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f59c24f3-eb35-4dae-a7e6-6c28e150c727\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>empty_values_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1960</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1961</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1962</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1963</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1964</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1965</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1966</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1967</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1968</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1969</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1970</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1971</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1972</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1973</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1974</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1975</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1976</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1977</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1978</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1979</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1980</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1981</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1982</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1983</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1984</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1985</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1986</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1987</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1988</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1989</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1990</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1991</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1992</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1993</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>1994</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1995</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1996</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1997</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1999</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>2000</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>2001</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>2002</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>2003</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>2004</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>2005</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>2006</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>2007</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>2008</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2009</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2010</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2011</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2012</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2013</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2014</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2015</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>2016</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2019</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2020</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>2021</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>2022</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f59c24f3-eb35-4dae-a7e6-6c28e150c727')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f59c24f3-eb35-4dae-a7e6-6c28e150c727 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f59c24f3-eb35-4dae-a7e6-6c28e150c727');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-77f3ff97-2f89-4b33-80a6-40e073500413\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77f3ff97-2f89-4b33-80a6-40e073500413')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-77f3ff97-2f89-4b33-80a6-40e073500413 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2f3ec973-2912-4ea5-8d2e-b0c1cf3a7547\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rem_rec_emp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2f3ec973-2912-4ea5-8d2e-b0c1cf3a7547 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rem_rec_emp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "unemp_df= melt_dataframe(unemp_df, unemp_df.columns[0:4], value_name = 'unemp_value')"
      ],
      "metadata": {
        "id": "Et18PvHCJ2uT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "unemp_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "2580F1TGSr3a",
        "outputId": "5296c356-a2b6-45c0-94c3-20a81933eab4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country name country code  \\\n",
              "4         Angola          AGO   \n",
              "16       Burundi          BDI   \n",
              "18         Benin          BEN   \n",
              "19  Burkina Faso          BFA   \n",
              "33      Botswana          BWA   \n",
              "\n",
              "                                       indicator name  indicator code  year  \\\n",
              "4   Unemployment, total (% of total labor force) (...  SL.UEM.TOTL.ZS  1960   \n",
              "16  Unemployment, total (% of total labor force) (...  SL.UEM.TOTL.ZS  1960   \n",
              "18  Unemployment, total (% of total labor force) (...  SL.UEM.TOTL.ZS  1960   \n",
              "19  Unemployment, total (% of total labor force) (...  SL.UEM.TOTL.ZS  1960   \n",
              "33  Unemployment, total (% of total labor force) (...  SL.UEM.TOTL.ZS  1960   \n",
              "\n",
              "    unemp_value  \n",
              "4           NaN  \n",
              "16          NaN  \n",
              "18          NaN  \n",
              "19          NaN  \n",
              "33          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-174627ac-56b2-4d8a-a73d-dcfea7fccb64\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>country code</th>\n",
              "      <th>indicator name</th>\n",
              "      <th>indicator code</th>\n",
              "      <th>year</th>\n",
              "      <th>unemp_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>Unemployment, total (% of total labor force) (...</td>\n",
              "      <td>SL.UEM.TOTL.ZS</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>BDI</td>\n",
              "      <td>Unemployment, total (% of total labor force) (...</td>\n",
              "      <td>SL.UEM.TOTL.ZS</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Benin</td>\n",
              "      <td>BEN</td>\n",
              "      <td>Unemployment, total (% of total labor force) (...</td>\n",
              "      <td>SL.UEM.TOTL.ZS</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>BFA</td>\n",
              "      <td>Unemployment, total (% of total labor force) (...</td>\n",
              "      <td>SL.UEM.TOTL.ZS</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>BWA</td>\n",
              "      <td>Unemployment, total (% of total labor force) (...</td>\n",
              "      <td>SL.UEM.TOTL.ZS</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-174627ac-56b2-4d8a-a73d-dcfea7fccb64')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-174627ac-56b2-4d8a-a73d-dcfea7fccb64 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-174627ac-56b2-4d8a-a73d-dcfea7fccb64');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-019487c9-8629-4f2e-b99e-9794bf02588a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-019487c9-8629-4f2e-b99e-9794bf02588a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-019487c9-8629-4f2e-b99e-9794bf02588a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "unemp_emp = empty(unemp_df, 'unemp_value')"
      ],
      "metadata": {
        "id": "ibTnLd43MW2T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "unemp_emp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Gr4BKyiPMfTf",
        "outputId": "ac22ad4d-16af-4f57-c3f3-f56573c9bc76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    year  empty_values_count\n",
              "0   1960                  53\n",
              "1   1961                  53\n",
              "2   1962                  53\n",
              "3   1963                  53\n",
              "4   1964                  53\n",
              "5   1965                  53\n",
              "6   1966                  53\n",
              "7   1967                  53\n",
              "8   1968                  53\n",
              "9   1969                  53\n",
              "10  1970                  53\n",
              "11  1971                  53\n",
              "12  1972                  53\n",
              "13  1973                  53\n",
              "14  1974                  53\n",
              "15  1975                  53\n",
              "16  1976                  53\n",
              "17  1977                  53\n",
              "18  1978                  53\n",
              "19  1979                  53\n",
              "20  1980                  53\n",
              "21  1981                  53\n",
              "22  1982                  53\n",
              "23  1983                  53\n",
              "24  1984                  53\n",
              "25  1985                  53\n",
              "26  1986                  53\n",
              "27  1987                  53\n",
              "28  1988                  53\n",
              "29  1989                  53\n",
              "30  1990                  53\n",
              "31  1991                   1\n",
              "32  1992                   1\n",
              "33  1993                   1\n",
              "34  1994                   1\n",
              "35  1995                   1\n",
              "36  1996                   1\n",
              "37  1997                   1\n",
              "38  1998                   1\n",
              "39  1999                   1\n",
              "40  2000                   1\n",
              "41  2001                   1\n",
              "42  2002                   1\n",
              "43  2003                   1\n",
              "44  2004                   1\n",
              "45  2005                   1\n",
              "46  2006                   1\n",
              "47  2007                   1\n",
              "48  2008                   1\n",
              "49  2009                   1\n",
              "50  2010                   1\n",
              "51  2011                   1\n",
              "52  2012                   1\n",
              "53  2013                   1\n",
              "54  2014                   1\n",
              "55  2015                   1\n",
              "56  2016                   1\n",
              "57  2017                   1\n",
              "58  2018                   1\n",
              "59  2019                   1\n",
              "60  2020                   1\n",
              "61  2021                   1\n",
              "62  2022                   1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed5745b5-fe75-46bb-8f52-3fa543d839b0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>empty_values_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1960</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1961</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1962</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1963</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1964</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1965</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1966</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1967</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1968</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1969</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1970</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1971</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1972</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1973</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1974</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>1975</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>1976</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1977</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>1978</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1979</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1980</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1981</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1982</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1983</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>1984</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>1985</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>1986</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1987</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>1988</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1989</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1990</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>1991</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1992</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1993</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>1994</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>1995</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1996</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1997</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1998</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1999</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>2001</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>2002</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>2003</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>2004</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>2005</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>2006</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>2007</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2011</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2012</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2014</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>2016</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2020</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>2022</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed5745b5-fe75-46bb-8f52-3fa543d839b0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed5745b5-fe75-46bb-8f52-3fa543d839b0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed5745b5-fe75-46bb-8f52-3fa543d839b0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d522c45-c41b-421a-89b9-4aa40c299ae7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d522c45-c41b-421a-89b9-4aa40c299ae7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d522c45-c41b-421a-89b9-4aa40c299ae7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_35c6a4bc-aa39-486c-9d95-5053de2d64d2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('unemp_emp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_35c6a4bc-aa39-486c-9d95-5053de2d64d2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('unemp_emp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for each in [fdi_df,gdp_df,mig_df,pop_df,rem_paid,rem_rec,unemp_df]:\n",
        "  each = each.drop(['country code','indicator name','indicator code'], axis = 1, inplace = True)\n"
      ],
      "metadata": {
        "id": "Wtalnj4NS2yz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge the DataFrames one by one\n",
        "merged_df = fdi_df.merge(gdp_df, on=['country name', 'year'], how='outer')\n",
        "merged_df = merged_df.merge(mig_df, on=['country name', 'year'], how='outer')\n",
        "merged_df = merged_df.merge(pop_df, on=['country name', 'year'], how='outer')\n",
        "merged_df = merged_df.merge(rem_paid, on=['country name', 'year'], how='outer')\n",
        "merged_df = merged_df.merge(rem_rec, on=['country name', 'year'], how='outer')\n",
        "merged_df = merged_df.merge(unemp_df, on=['country name', 'year'], how='outer')\n",
        "\n"
      ],
      "metadata": {
        "id": "SAWexqtrUqED"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the merged DataFrame\n",
        "merged_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Tu3jwKoeZ6Pu",
        "outputId": "f3a98ab5-e32d-41da-8b62-60e51ce9b860"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country name  year  fdi_value     gdp_value  mig_value  pop_value  \\\n",
              "0        Angola  1960        NaN           NaN   -43749.0  5357195.0   \n",
              "1       Burundi  1960        NaN  9.800000e+09   -14647.0  2746628.0   \n",
              "2         Benin  1960        NaN  5.546205e+10    -4725.0  2512284.0   \n",
              "3  Burkina Faso  1960        NaN  8.102296e+10   -23329.0  4783259.0   \n",
              "4      Botswana  1960        NaN  2.169310e+07    -4329.0   512865.0   \n",
              "\n",
              "   rem_paid_value  rem_rec_value  unemp_value  \n",
              "0             NaN            NaN          NaN  \n",
              "1             NaN            NaN          NaN  \n",
              "2             NaN            NaN          NaN  \n",
              "3             NaN            NaN          NaN  \n",
              "4             NaN            NaN          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bdf548df-772e-4127-8e64-8f5e82759131\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>year</th>\n",
              "      <th>fdi_value</th>\n",
              "      <th>gdp_value</th>\n",
              "      <th>mig_value</th>\n",
              "      <th>pop_value</th>\n",
              "      <th>rem_paid_value</th>\n",
              "      <th>rem_rec_value</th>\n",
              "      <th>unemp_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Angola</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-43749.0</td>\n",
              "      <td>5357195.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.800000e+09</td>\n",
              "      <td>-14647.0</td>\n",
              "      <td>2746628.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Benin</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.546205e+10</td>\n",
              "      <td>-4725.0</td>\n",
              "      <td>2512284.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8.102296e+10</td>\n",
              "      <td>-23329.0</td>\n",
              "      <td>4783259.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>1960</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.169310e+07</td>\n",
              "      <td>-4329.0</td>\n",
              "      <td>512865.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bdf548df-772e-4127-8e64-8f5e82759131')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bdf548df-772e-4127-8e64-8f5e82759131 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bdf548df-772e-4127-8e64-8f5e82759131');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d317068b-6945-414e-8a8c-70e22742838c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d317068b-6945-414e-8a8c-70e22742838c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d317068b-6945-414e-8a8c-70e22742838c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HLns7NnuZ839",
        "outputId": "afc4ca5e-154e-456c-ea8e-65181e557002"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3339, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o0HJEYQt7boE",
        "outputId": "749c9eda-2156-443c-ed4b-6acb9feff4f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 3339 entries, 0 to 3338\n",
            "Data columns (total 9 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   country name    3339 non-null   object \n",
            " 1   year            3339 non-null   object \n",
            " 2   fdi_value       2656 non-null   float64\n",
            " 3   gdp_value       2827 non-null   float64\n",
            " 4   mig_value       3286 non-null   float64\n",
            " 5   pop_value       3339 non-null   float64\n",
            " 6   rem_paid_value  1896 non-null   float64\n",
            " 7   rem_rec_value   1935 non-null   float64\n",
            " 8   unemp_value     1664 non-null   float64\n",
            "dtypes: float64(7), object(2)\n",
            "memory usage: 260.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df['year'] = pd.to_numeric(merged_df.year)"
      ],
      "metadata": {
        "id": "sYo1A77K7fWD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df = merged_df[merged_df.year >= 1991]"
      ],
      "metadata": {
        "id": "ObY3ZdST7RxK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U447iUcu8FY9",
        "outputId": "5ef01c58-96c0-4598-b407-481e3a554cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "country name        0\n",
              "year                0\n",
              "fdi_value          28\n",
              "gdp_value          77\n",
              "mig_value          53\n",
              "pop_value           0\n",
              "rem_paid_value    372\n",
              "rem_rec_value     276\n",
              "unemp_value        32\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hTByf3j4dglj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.replace( 'Congo, Dem. Rep.', 'Congo, Rep.', inplace = True)"
      ],
      "metadata": {
        "id": "WLfxBefPiiDf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for each in ['fdi_value','gdp_value','mig_value','unemp_value', 'rem_rec_value']:\n",
        "  print(each,':',merged_df[merged_df[each].isnull() == True]['country name'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mdzQOvb7baSe",
        "outputId": "f7798d5d-8f6c-4016-a3ed-ddcdd2935bbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fdi_value : ['Eritrea' 'South Sudan' 'Sao Tome and Principe' 'Libya']\n",
            "gdp_value : ['Eritrea' 'Liberia' 'Somalia' 'South Sudan' 'Sao Tome and Principe']\n",
            "mig_value : ['Angola' 'Burundi' 'Benin' 'Burkina Faso' 'Botswana'\n",
            " 'Central African Republic' \"Cote d'Ivoire\" 'Cameroon' 'Congo, Rep.'\n",
            " 'Comoros' 'Cabo Verde' 'Djibouti' 'Algeria' 'Eritrea' 'Ethiopia' 'Gabon'\n",
            " 'Ghana' 'Guinea' 'Gambia, The' 'Guinea-Bissau' 'Equatorial Guinea'\n",
            " 'Kenya' 'Liberia' 'Libya' 'Lesotho' 'Morocco' 'Madagascar' 'Mali'\n",
            " 'Mozambique' 'Mauritania' 'Mauritius' 'Malawi' 'Namibia' 'Niger'\n",
            " 'Nigeria' 'Rwanda' 'Sudan' 'Senegal' 'Sierra Leone' 'Somalia'\n",
            " 'South Sudan' 'Sao Tome and Principe' 'Eswatini' 'Seychelles' 'Chad'\n",
            " 'Togo' 'Tunisia' 'Tanzania' 'Uganda' 'South Africa' 'Zambia' 'Zimbabwe']\n",
            "unemp_value : ['Seychelles']\n",
            "rem_rec_value : ['Angola' 'Burundi' 'Congo, Rep.' 'Eritrea' 'Gambia, The'\n",
            " 'Equatorial Guinea' 'Liberia' 'Libya' 'Mauritius' 'Malawi' 'Somalia'\n",
            " 'South Sudan' 'Sao Tome and Principe' 'Chad' 'Tanzania' 'Uganda' 'Zambia'\n",
            " 'Central African Republic' 'Zimbabwe' 'Comoros' 'Mauritania']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df = merged_df[merged_df['country name'] != 'Seychelles']"
      ],
      "metadata": {
        "id": "79Yif2eoMCir"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def fill_nan_by_country_names(df, country_names):\n",
        "    for country_name in country_names:\n",
        "        # Filter the DataFrame for the specific country\n",
        "        subset_df = df.query('`country name` == @country_name')\n",
        "\n",
        "        # Perform forward fill and backward fill on the subset DataFrame\n",
        "        subset_df.fillna(method='ffill', inplace=True)\n",
        "        subset_df.fillna(method='bfill', inplace=True)\n",
        "\n",
        "        # Update the original DataFrame with the filled values based on the index\n",
        "        df.loc[subset_df.index] = subset_df\n",
        "\n",
        "    return df\n",
        "\n",
        "# Assuming merged_df is your original DataFrame\n",
        "# Define a list of country names\n",
        "country_names_list = ['Eritrea','South Sudan', 'Sao Tome and Principe','Libya','Liberia','Somalia','Angola', 'Burundi','Congo, Rep.',\n",
        "                      'Gambia, The','Equatorial Guinea', 'Mauritius', 'Malawi', 'Chad', 'Tanzania', 'Uganda', 'Zambia',\n",
        "                      'Central African Republic', 'Zimbabwe', 'Comoros', 'Mauritania']\n",
        "\n",
        "# Call the function to fill NaN values for the specified countries\n",
        "merged_df = fill_nan_by_country_names(merged_df, country_names_list)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WxRN7uTUh4cj",
        "outputId": "4912180e-69ea-4c0c-bae0-81017d3ee3df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-157-d47165c6b0d7>:9: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  subset_df.fillna(method='ffill', inplace=True)\n",
            "<ipython-input-157-d47165c6b0d7>:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  subset_df.fillna(method='bfill', inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gKYR0w4uU7or",
        "outputId": "598ca7b8-5df6-4604-989f-d7ee423d0f35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      country name  year     fdi_value     gdp_value  mig_value   pop_value  \\\n",
              "1643        Angola  1991  6.645000e+08  7.000000e+02    33925.0  12228691.0   \n",
              "1644       Burundi  1991  8.925001e+05  2.118980e+11   -39298.0   5594828.0   \n",
              "1645         Benin  1991  3.938223e+05  5.603878e+11        0.0   5293046.0   \n",
              "1646  Burkina Faso  1991  5.700000e+05  8.844180e+11   -50568.0   9365064.0   \n",
              "1647      Botswana  1991 -8.211494e+06  7.970750e+09     4166.0   1380584.0   \n",
              "\n",
              "      rem_paid_value  rem_rec_value  unemp_value  \n",
              "1643    1.245000e+08   5.142000e+06        4.489  \n",
              "1644    4.363334e+06   4.178399e+04        2.616  \n",
              "1645    2.072760e+07   1.179705e+08        1.484  \n",
              "1646    7.066116e+07   1.129678e+08        2.553  \n",
              "1647    1.179289e+08   8.350001e+07       13.820  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1943002e-1d90-4d98-866e-bde77fc6d30b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country name</th>\n",
              "      <th>year</th>\n",
              "      <th>fdi_value</th>\n",
              "      <th>gdp_value</th>\n",
              "      <th>mig_value</th>\n",
              "      <th>pop_value</th>\n",
              "      <th>rem_paid_value</th>\n",
              "      <th>rem_rec_value</th>\n",
              "      <th>unemp_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1643</th>\n",
              "      <td>Angola</td>\n",
              "      <td>1991</td>\n",
              "      <td>6.645000e+08</td>\n",
              "      <td>7.000000e+02</td>\n",
              "      <td>33925.0</td>\n",
              "      <td>12228691.0</td>\n",
              "      <td>1.245000e+08</td>\n",
              "      <td>5.142000e+06</td>\n",
              "      <td>4.489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1644</th>\n",
              "      <td>Burundi</td>\n",
              "      <td>1991</td>\n",
              "      <td>8.925001e+05</td>\n",
              "      <td>2.118980e+11</td>\n",
              "      <td>-39298.0</td>\n",
              "      <td>5594828.0</td>\n",
              "      <td>4.363334e+06</td>\n",
              "      <td>4.178399e+04</td>\n",
              "      <td>2.616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1645</th>\n",
              "      <td>Benin</td>\n",
              "      <td>1991</td>\n",
              "      <td>3.938223e+05</td>\n",
              "      <td>5.603878e+11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5293046.0</td>\n",
              "      <td>2.072760e+07</td>\n",
              "      <td>1.179705e+08</td>\n",
              "      <td>1.484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1646</th>\n",
              "      <td>Burkina Faso</td>\n",
              "      <td>1991</td>\n",
              "      <td>5.700000e+05</td>\n",
              "      <td>8.844180e+11</td>\n",
              "      <td>-50568.0</td>\n",
              "      <td>9365064.0</td>\n",
              "      <td>7.066116e+07</td>\n",
              "      <td>1.129678e+08</td>\n",
              "      <td>2.553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1647</th>\n",
              "      <td>Botswana</td>\n",
              "      <td>1991</td>\n",
              "      <td>-8.211494e+06</td>\n",
              "      <td>7.970750e+09</td>\n",
              "      <td>4166.0</td>\n",
              "      <td>1380584.0</td>\n",
              "      <td>1.179289e+08</td>\n",
              "      <td>8.350001e+07</td>\n",
              "      <td>13.820</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1943002e-1d90-4d98-866e-bde77fc6d30b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1943002e-1d90-4d98-866e-bde77fc6d30b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1943002e-1d90-4d98-866e-bde77fc6d30b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-50780bb6-ac6d-4fc0-8caa-07a041324b59\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50780bb6-ac6d-4fc0-8caa-07a041324b59')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-50780bb6-ac6d-4fc0-8caa-07a041324b59 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Feature Engineering"
      ],
      "metadata": {
        "id": "JPCy24Z5nC9K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming you have a DataFrame named 'merged_df' containing the relevant columns\n",
        "# Adjust column names as needed\n",
        "\n",
        "# Calculate remittance-to-GDP ratio\n",
        "merged_df['remittance_to_gdp_ratio'] = merged_df['rem_rec_value'] / merged_df['gdp_value']\n",
        "\n",
        "# Calculate remittance per capita\n",
        "merged_df['remittance_per_capita'] = merged_df['rem_rec_value'] / merged_df['pop_value']\n",
        "\n",
        "# Calculate remittance volatility (standard deviation of remittances)\n",
        "merged_df['remittance_volatility'] = merged_df['rem_rec_value'].rolling(window=3).std()\n",
        "\n",
        "\n",
        "# Calculate remittance growth rate\n",
        "merged_df['remittance_growth_rate'] = merged_df['rem_rec_value'].pct_change()\n",
        "\n",
        "# Calculate GDP per capita\n",
        "merged_df['gdp_per_capita'] = merged_df['gdp_value'] / merged_df['pop_value']\n",
        "\n",
        "# Calculate unemployment rate change\n",
        "merged_df['unemployment_rate_change'] = merged_df['unemp_value'].diff()\n",
        "\n",
        "# Drop rows with NaN resulting from calculations\n",
        "merged_df.dropna(inplace=True)\n",
        "\n"
      ],
      "metadata": {
        "id": "BczNVpINnIt2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install statsmodels\n"
      ],
      "metadata": {
        "id": "7MDeVXfdVb2m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pmdarima\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WWR9tUPCjqwR",
        "outputId": "3fe653b6-5009-42bb-a5f4-9e987a308787"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pmdarima\n",
            "  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.3.2)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (3.0.6)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.23.5)\n",
            "Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.5.3)\n",
            "Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.2.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.11.4)\n",
            "Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (0.14.0)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.0.7)\n",
            "Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (67.7.2)\n",
            "Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (23.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2023.3.post1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22->pmdarima) (3.2.0)\n",
            "Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.2->statsmodels>=0.13.2->pmdarima) (1.16.0)\n",
            "Installing collected packages: pmdarima\n",
            "Successfully installed pmdarima-2.0.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from statsmodels.tsa.seasonal import STL\n",
        "from statsmodels.tsa.stattools import adfuller\n",
        "from statsmodels.tsa.stattools import grangercausalitytests\n",
        "\n",
        "# Assuming 'year' is in integer format, convert it to datetime\n",
        "merged_df['year'] = pd.to_datetime(merged_df['year'], format='%Y')\n",
        "\n",
        "# Visual Inspection\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(merged_df['year'], merged_df['rem_rec_value'], label='Remittances Received')\n",
        "plt.plot(merged_df['year'], merged_df['fdi_value'], label='FDI')\n",
        "plt.title('Time Series Plot of Remittances Received and FDI')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Descriptive Statistics\n",
        "desc_stats = merged_df[['rem_rec_value', 'fdi_value']].describe()\n",
        "print(desc_stats)\n",
        "\n",
        "# Trend Analysis\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.lineplot(x='year', y='rem_rec_value', data=merged_df, label='Remittances Received')\n",
        "sns.lineplot(x='year', y='fdi_value', data=merged_df, label='FDI')\n",
        "plt.title('Trend Analysis of Remittances Received and FDI')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Seasonal Decomposition with specified period\n",
        "period = 12  # Assuming a yearly seasonality, you can adjust this based on your data\n",
        "stl = STL(merged_df['rem_rec_value'], seasonal=13, period=period)\n",
        "result = stl.fit()\n",
        "seasonal, trend, resid = result.seasonal, result.trend, result.resid\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(merged_df['year'], seasonal, label='Seasonal Component')\n",
        "plt.plot(merged_df['year'], trend, label='Trend Component')\n",
        "plt.title('Seasonal Decomposition of Remittances Received')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "iEzzqpY4Vb6i",
        "outputId": "8eae5571-160c-452e-d8a1-d9918a1cdcf9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       rem_rec_value     fdi_value\n",
            "count   1.664000e+03  1.664000e+03\n",
            "mean    5.932292e+08  5.191866e+08\n",
            "std     2.235147e+09  1.533536e+09\n",
            "min     0.000000e+00 -7.397295e+09\n",
            "25%     8.691993e+06  1.472794e+07\n",
            "50%     6.174859e+07  1.215058e+08\n",
            "75%     3.336902e+08  5.231370e+08\n",
            "max     2.431102e+10  4.065879e+10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Correlation Over Time\n",
        "correlation_over_time = merged_df[['year', 'rem_rec_value', 'fdi_value']].set_index('year').rolling(window=3).corr().reset_index()\n",
        "correlation_over_time = correlation_over_time[correlation_over_time['level_1'] == 'rem_rec_value'][['year', 'fdi_value']]\n",
        "\n",
        "# Plotting\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(correlation_over_time['year'], correlation_over_time['fdi_value'], label='Correlation over Time')\n",
        "plt.title('Correlation Between Remittances Received and FDI Over Time')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Correlation Coefficient')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "RUPSvRQWaago",
        "outputId": "92e0a8be-992f-4645-e4be-3c10c734eb80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Granger Causality Test\n",
        "max_lag = 3  # You can adjust this based on your preference\n",
        "granger_test_result = grangercausalitytests(merged_df[['rem_rec_value', 'fdi_value']], max_lag, verbose=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-291Z3kYZ8s",
        "outputId": "b2986811-abbe-4ac4-8319-9b6a0792b327"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 1\n",
            "ssr based F test:         F=0.0107  , p=0.9178  , df_denom=1660, df_num=1\n",
            "ssr based chi2 test:   chi2=0.0107  , p=0.9177  , df=1\n",
            "likelihood ratio test: chi2=0.0107  , p=0.9177  , df=1\n",
            "parameter F test:         F=0.0107  , p=0.9178  , df_denom=1660, df_num=1\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 2\n",
            "ssr based F test:         F=4.6403  , p=0.0098  , df_denom=1657, df_num=2\n",
            "ssr based chi2 test:   chi2=9.3086  , p=0.0095  , df=2\n",
            "likelihood ratio test: chi2=9.2826  , p=0.0096  , df=2\n",
            "parameter F test:         F=4.6403  , p=0.0098  , df_denom=1657, df_num=2\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 3\n",
            "ssr based F test:         F=3.8222  , p=0.0096  , df_denom=1654, df_num=3\n",
            "ssr based chi2 test:   chi2=11.5152 , p=0.0092  , df=3\n",
            "likelihood ratio test: chi2=11.4755 , p=0.0094  , df=3\n",
            "parameter F test:         F=3.8222  , p=0.0096  , df_denom=1654, df_num=3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/stattools.py:1488: FutureWarning: verbose is deprecated since functions should not print results\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Interpretation**\n",
        "\n",
        "1. **Number of Lags (No Zero): 1**\n",
        "   - F-statistic (ssr based F test): 0.0107\n",
        "   - p-value: 0.9178\n",
        "   - Chi-squared test (ssr based chi2 test): 0.0107\n",
        "   - Likelihood ratio test: 0.0107\n",
        "   - Parameter F test: 0.0107\n",
        "\n",
        "   **Interpretation:** The p-value is high (0.9178), indicating that there is no evidence to reject the null hypothesis. This suggests that the past values of 'rem_rec_value' do not Granger-cause the current values of 'fdi_value' with one lag.\n",
        "\n",
        "2. **Number of Lags (No Zero): 2**\n",
        "   - F-statistic: 4.6403\n",
        "   - p-value: 0.0098\n",
        "   - Chi-squared test: 9.3086\n",
        "   - Likelihood ratio test: 9.2826\n",
        "   - Parameter F test: 4.6403\n",
        "\n",
        "   **Interpretation:** The p-value is low (0.0098), suggesting evidence to reject the null hypothesis. There is an indication that the past values of 'rem_rec_value' Granger-cause the current values of 'fdi_value' with two lags.\n",
        "\n",
        "3. **Number of Lags (No Zero): 3**\n",
        "   - F-statistic: 3.8222\n",
        "   - p-value: 0.0096\n",
        "   - Chi-squared test: 11.5152\n",
        "   - Likelihood ratio test: 11.4755\n",
        "   - Parameter F test: 3.8222\n",
        "\n",
        "   **Interpretation:** Similar to the second lag, the p-value is low (0.0096), indicating evidence to reject the null hypothesis. This suggests that the past values of 'rem_rec_value' Granger-cause the current values of 'fdi_value' with three lags.\n",
        "\n",
        "In summary, the Granger Causality Test suggests that there is some evidence that past values of 'rem_rec_value' can predict current values of 'fdi_value', particularly with two and three lags. The low p-values in these cases indicate statistical significance."
      ],
      "metadata": {
        "id": "8-QWd8zWgNjH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Stationarity Check\n",
        "adf_result_remit = adfuller(merged_df['rem_rec_value'], autolag='AIC')\n",
        "adf_result_fdi = adfuller(merged_df['fdi_value'], autolag='AIC')\n",
        "\n",
        "print(f'ADF Test Result for Remittances Received: {adf_result_remit}')\n",
        "print(f'ADF Test Result for FDI: {adf_result_fdi}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VExkjox5Ya7l",
        "outputId": "5eb993dc-f719-4c41-ef02-b12c66382d16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADF Test Result for Remittances Received: (-7.85398186963955, 5.505215136467061e-12, 12, 1651, {'1%': -3.4343169874697574, '5%': -2.863292198180267, '10%': -2.567702829432523}, 75018.60855147605)\n",
            "ADF Test Result for FDI: (-5.19806052947573, 8.872597490299962e-06, 19, 1644, {'1%': -3.4343339050195465, '5%': -2.8632996655963554, '10%': -2.567706805740553}, 73818.28545826163)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here's the interpretation for the ADF test results so as to determine wheter the time series is stationary or not:\n",
        "\n",
        "1. **ADF Test Result for Remittances Received:**\n",
        "   - Test Statistic: -7.85398186963955\n",
        "   - P-value: 5.505215136467061e-12 (very close to zero)\n",
        "   - Critical Values at 1%, 5%, and 10% confidence levels: -3.4343169874697574, -2.863292198180267, -2.567702829432523\n",
        "\n",
        "   **Interpretation:** The extremely low p-value (close to zero) suggests strong evidence against the null hypothesis of non-stationarity. Therefore, you can reject the null hypothesis and conclude that the 'rem_rec_value' time series is stationary. The test statistic is significantly lower than the critical values, further supporting the conclusion.\n",
        "\n",
        "2. **ADF Test Result for FDI:**\n",
        "   - Test Statistic: -5.19806052947573\n",
        "   - P-value: 8.872597490299962e-06 (very close to zero)\n",
        "   - Critical Values at 1%, 5%, and 10% confidence levels: -3.4343339050195465, -2.8632996655963554, -2.567706805740553\n",
        "\n",
        "   **Interpretation:** Similar to the remittances received, the low p-value (close to zero) provides strong evidence against the null hypothesis of non-stationarity for the 'fdi_value' time series. Therefore, you can conclude that the 'fdi_value' time series is stationary. The test statistic is significantly lower than the critical values.\n",
        "\n",
        "In summary, both time series ('rem_rec_value' and 'fdi_value') are stationary based on the ADF test results. Stationarity is a crucial assumption for many time series analyses, and having stationary time series allows for more reliable modeling and forecasting."
      ],
      "metadata": {
        "id": "etH89p1Dfrfp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pmdarima as pm\n",
        "\n",
        "# Assuming 'year' is in integer format, convert it to datetime\n",
        "# merged_df['year'] = pd.to_datetime(merged_df['year'], format='%Y')\n",
        "\n",
        "# Set 'year' as the index\n",
        "# merged_df.set_index('year', inplace=True)\n",
        "\n",
        "# Use auto_arima to automatically select the best ARIMA model\n",
        "rem_arima_model = pm.auto_arima(merged_df['rem_rec_value'], seasonal=False, suppress_warnings=True, stepwise=True)\n",
        "fdi_arima_model = pm.auto_arima(merged_df['fdi_value'], seasonal=False, suppress_warnings=True, stepwise=True)\n",
        "\n",
        "# Print the selected model orders\n",
        "print(f\"ARIMA Order for Remittances Received: {rem_arima_model.order}\")\n",
        "print(f\"ARIMA Order for FDI: {fdi_arima_model.order}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RVWBTbUMjwqX",
        "outputId": "653c77f5-6dec-47d4-b86b-9f59018e9409"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/pmdarima/arima/_auto_solvers.py:524: ModelFitWarning: Error fitting  ARIMA(3,1,3)(0,0,0)[0] intercept (if you do not want to see these warnings, run with error_action=\"ignore\").\n",
            "Traceback:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pmdarima/arima/_auto_solvers.py\", line 508, in _fit_candidate_model\n",
            "    fit.fit(y, X=X, **fit_params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pmdarima/arima/arima.py\", line 603, in fit\n",
            "    self._fit(y, X, **fit_args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pmdarima/arima/arima.py\", line 524, in _fit\n",
            "    fit, self.arima_res_ = _fit_wrapper()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pmdarima/arima/arima.py\", line 510, in _fit_wrapper\n",
            "    fitted = arima.fit(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/mlemodel.py\", line 704, in fit\n",
            "    mlefit = super(MLEModel, self).fit(start_params, method=method,\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py\", line 566, in fit\n",
            "    xopt, retvals, optim_settings = optimizer._fit(f, score, start_params,\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/base/optimizer.py\", line 242, in _fit\n",
            "    xopt, retvals = func(objective, gradient, start_params, fargs, kwargs,\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/base/optimizer.py\", line 659, in _fit_lbfgs\n",
            "    retvals = optimize.fmin_l_bfgs_b(func, start_params, maxiter=maxiter,\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_lbfgsb_py.py\", line 199, in fmin_l_bfgs_b\n",
            "    res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_lbfgsb_py.py\", line 365, in _minimize_lbfgsb\n",
            "    f, g = func_and_grad(x)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_differentiable_functions.py\", line 285, in fun_and_grad\n",
            "    self._update_fun()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_differentiable_functions.py\", line 251, in _update_fun\n",
            "    self._update_fun_impl()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_differentiable_functions.py\", line 155, in update_fun\n",
            "    self.f = fun_wrapped(self.x)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/scipy/optimize/_differentiable_functions.py\", line 137, in fun_wrapped\n",
            "    fx = fun(np.copy(x), *args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py\", line 534, in f\n",
            "    return -self.loglike(params, *args) / nobs\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/mlemodel.py\", line 939, in loglike\n",
            "    loglike = self.ssm.loglike(complex_step=complex_step, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 1001, in loglike\n",
            "    kfilter = self._filter(**kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 921, in _filter\n",
            "    self._initialize_state(prefix=prefix, complex_step=complex_step)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/representation.py\", line 1058, in _initialize_state\n",
            "    self._statespaces[prefix].initialize(self.initialization,\n",
            "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1373, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
            "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1362, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
            "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 288, in statsmodels.tsa.statespace._initialization.dInitialization.initialize\n",
            "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 406, in statsmodels.tsa.statespace._initialization.dInitialization.initialize_stationary_stationary_cov\n",
            "  File \"statsmodels/tsa/statespace/_tools.pyx\", line 1603, in statsmodels.tsa.statespace._tools._dsolve_discrete_lyapunov\n",
            "numpy.linalg.LinAlgError: Schur decomposition solver error.\n",
            "\n",
            "  warnings.warn(warning_str, ModelFitWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ARIMA Order for Remittances Received: (1, 1, 3)\n",
            "ARIMA Order for FDI: (4, 1, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "\n",
        "\n",
        "# Plot the time series to visualize trends and patterns\n",
        "plt.figure(figsize=(15, 6))\n",
        "plt.plot(merged_df['rem_rec_value'], label='Remittances Received')\n",
        "plt.plot(merged_df['fdi_value'], label='FDI')\n",
        "plt.title('Time Series Plot of Remittances Received and FDI')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# ACF and PACF plots to identify potential ARIMA parameters\n",
        "plt.figure(figsize=(15, 6))\n",
        "plot_acf(merged_df['rem_rec_value'], lags=30, zero=False)\n",
        "plt.title('Autocorrelation Function (ACF) for Remittances Received')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(15, 6))\n",
        "plot_pacf(merged_df['rem_rec_value'], lags=30, zero=False)\n",
        "plt.title('Partial Autocorrelation Function (PACF) for Remittances Received')\n",
        "plt.show()\n",
        "\n",
        "# Fit ARIMA model for 'rem_rec_value'\n",
        "rem_arima = ARIMA(merged_df['rem_rec_value'], order=(1, 1, 3)).fit()\n",
        "\n",
        "# Forecast future values\n",
        "forecast_steps = 10  # Change this based on your preference\n",
        "forecast_rem = rem_arima.get_forecast(steps=forecast_steps)\n",
        "confidence_interval = forecast_rem.conf_int()\n",
        "\n",
        "# Plot the observed, predicted, and confidence interval for 'rem_rec_value'\n",
        "plt.figure(figsize=(15, 6))\n",
        "plt.plot(merged_df['rem_rec_value'], label='Observed')\n",
        "plt.plot(forecast_rem.predicted_mean, color='red', label='Predicted')\n",
        "plt.fill_between(confidence_interval.index, confidence_interval.iloc[:, 0], confidence_interval.iloc[:, 1], color='pink', alpha=0.3, label='Confidence Interval')\n",
        "plt.title('ARIMA Model for Remittances Received')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Repeat the same process for 'fdi_value'\n",
        "# ...\n",
        "\n",
        "# Evaluate model performance (optional)\n",
        "# Calculate Mean Squared Error (MSE) or other relevant metrics\n",
        "# mse_rem = mean_squared_error(merged_df['rem_rec_value'], forecast_rem.predicted_mean)\n",
        "# mse_fdi = mean_squared_error(merged_df['fdi_value'], forecast_fdi.predicted_mean)\n",
        "\n",
        "# Print model summary (optional)\n",
        "# print(rem_arima.summary())\n",
        "# print(fdi_arima.summary())\n",
        "\n",
        "# Discuss findings and implications\n",
        "# ...\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Nw1B303Mi4fN",
        "outputId": "f2e8fb63-18d2-43d9-a798-f0cb32da7eb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-stationary starting autoregressive parameters'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-invertible starting MA parameters found.'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Fit ARIMA model for 'fdi_value'\n",
        "fdi_arima = ARIMA(merged_df['fdi_value'], order=(4, 1, 2)).fit()\n",
        "\n",
        "# Forecast future values\n",
        "forecast_steps = 10  # Change this based on your preference\n",
        "forecast_fdi = fdi_arima.get_forecast(steps=forecast_steps)\n",
        "confidence_interval_fdi = forecast_fdi.conf_int()\n",
        "\n",
        "# Plot the observed, predicted, and confidence interval for 'fdi_value'\n",
        "plt.figure(figsize=(15, 6))\n",
        "plt.plot(merged_df['fdi_value'], label='Observed')\n",
        "plt.plot(forecast_fdi.predicted_mean, color='red', label='Predicted')\n",
        "plt.fill_between(confidence_interval_fdi.index, confidence_interval_fdi.iloc[:, 0], confidence_interval_fdi.iloc[:, 1], color='pink', alpha=0.3, label='Confidence Interval')\n",
        "plt.title('ARIMA Model for FDI')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 729
        },
        "id": "QXuJVOsbi4mo",
        "outputId": "ef9d6bbb-13cd-4d34-e540-7342378ab920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate model performance (optional)\n",
        "# Calculate Mean Squared Error (MSE) or other relevant metrics\n",
        "mse_fdi = mean_squared_error(merged_df['fdi_value'], forecast_fdi.predicted_mean)\n",
        "print(f'Mean Squared Error for FDI: {mse_fdi}')\n",
        "\n",
        "# Print model summary (optional)\n",
        "# print(fdi_arima.summary())\n",
        "\n",
        "# Discuss findings and implications\n",
        "# ..."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "1FElzqGxlflg",
        "outputId": "d41f28d8-9650-4a16-d0c2-b95675bdd0a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-182-00c1f4b4b4d1>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Evaluate model performance (optional)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Calculate Mean Squared Error (MSE) or other relevant metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmse_fdi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'fdi_value'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforecast_fdi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredicted_mean\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Mean Squared Error for FDI: {mse_fdi}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred, sample_weight, multioutput, squared)\u001b[0m\n\u001b[1;32m    440\u001b[0m     \u001b[0;36m0.825\u001b[0m\u001b[0;34m...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    441\u001b[0m     \"\"\"\n\u001b[0;32m--> 442\u001b[0;31m     y_type, y_true, y_pred, multioutput = _check_reg_targets(\n\u001b[0m\u001b[1;32m    443\u001b[0m         \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultioutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    444\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_regression.py\u001b[0m in \u001b[0;36m_check_reg_targets\u001b[0;34m(y_true, y_pred, multioutput, dtype)\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0mcorrect\u001b[0m \u001b[0mkeyword\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m     \"\"\"\n\u001b[0;32m--> 100\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    101\u001b[0m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    395\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    398\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [1664, 10]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Assuming 'merged_df' is your DataFrame\n",
        "reshaped_data = merged_df[['gdp_value', 'unemp_value']].values.reshape(1503, -1)\n",
        "\n",
        "# Now 'reshaped_data' has shape (1503, 2)\n",
        "\n",
        "\n",
        "# Now 'reshaped_data' has shape (757, 2), assuming there are 1515 rows in the original DataFrame\n",
        "reshaped_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "KciDZKwFqYII",
        "outputId": "483a79ec-c8c3-49d0-9ab2-78801d4a7798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-189-15ec1136ecb6>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Assuming 'merged_df' is your DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mreshaped_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'gdp_value'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'unemp_value'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1503\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Now 'reshaped_data' has shape (1503, 2)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 3030 into shape (1503,newaxis)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'merged_df' is your DataFrame with a datetime index and relevant columns\n",
        "# Replace column names as needed\n",
        "\n",
        "# Create a datetime index (assuming it's not already there)\n",
        "# merged_df['year'] = pd.to_datetime(merged_df['year'], format='%Y')\n",
        "# merged_df.set_index('year', inplace=True)\n",
        "\n",
        "# Consideration: You might need to further preprocess the data (e.g., fill missing values, handle outliers)\n",
        "\n",
        "# Decompose time series to identify trends and seasonality\n",
        "result = sm.tsa.seasonal_decompose(merged_df['rem_rec_value'], model='additive', period=12)\n",
        "trend = result.trend.dropna()\n",
        "seasonal = result.seasonal.dropna()\n",
        "\n",
        "# Dynamic Regression Model\n",
        "# Assume you have additional features like GDP, unemployment rate, etc.\n",
        "X = merged_df[['gdp_value', 'unemp_value']]\n",
        "X = sm.add_constant(X)  # add a constant term for the intercept\n",
        "\n",
        "# Concatenate trend and seasonal components as exogenous variables\n",
        "X['trend'] = trend.values\n",
        "X['seasonal'] = seasonal.values\n",
        "\n",
        "y = merged_df['rem_rec_value']\n",
        "\n",
        "# Train-test split\n",
        "train_size = int(0.8 * len(merged_df))\n",
        "train_X, test_X = X.iloc[:train_size], X.iloc[train_size:]\n",
        "train_y, test_y = y.iloc[:train_size], y.iloc[train_size:]\n",
        "\n",
        "# Fit the dynamic regression model\n",
        "model = sm.OLS(train_y, train_X).fit()\n",
        "\n",
        "# Predictions\n",
        "predictions = model.predict(test_X)\n",
        "\n",
        "# Plot actual vs. predicted\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(test_y.index, test_y, label='Actual Remittances')\n",
        "plt.plot(test_y.index, predictions, label='Predicted Remittances')\n",
        "plt.title('Dynamic Regression Model: Actual vs. Predicted Remittances')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Remittance Amount')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Evaluate model performance (optional)\n",
        "# Calculate Mean Squared Error (MSE) or other relevant metrics\n",
        "mse = ((predictions - test_y) ** 2).mean()\n",
        "print(f'Mean Squared Error: {mse}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "EGCIttV2pBCo",
        "outputId": "7e31bc50-54d8-4d76-ae22-4f6f7150e801"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-185-888ef2eca06b>\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;31m# Concatenate trend and seasonal components as exogenous variables\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'trend'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'seasonal'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mseasonal\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3978\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3979\u001b[0m             \u001b[0;31m# set column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3980\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_item\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3981\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3982\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_setitem_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_set_item\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   4172\u001b[0m         \u001b[0mensure\u001b[0m \u001b[0mhomogeneity\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4173\u001b[0m         \"\"\"\n\u001b[0;32m-> 4174\u001b[0;31m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sanitize_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4176\u001b[0m         if (\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_sanitize_column\u001b[0;34m(self, value)\u001b[0m\n\u001b[1;32m   4913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4914\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_list_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4915\u001b[0;31m             \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequire_length_match\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4916\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msanitize_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4917\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/common.py\u001b[0m in \u001b[0;36mrequire_length_match\u001b[0;34m(data, index)\u001b[0m\n\u001b[1;32m    569\u001b[0m     \"\"\"\n\u001b[1;32m    570\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 571\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    572\u001b[0m             \u001b[0;34m\"Length of values \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    573\u001b[0m             \u001b[0;34mf\"({len(data)}) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Length of values (1503) does not match length of index (1515)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WHoV6xsVpBUB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new = merged_df.groupby('country name')[['rem_paid_value', 'rem_rec_value']].sum()"
      ],
      "metadata": {
        "id": "LpQ7DZRnMPee"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: select only the 'rem_paid_value' column from new and sort in descending order\n",
        "\n",
        "top_ten_rem_paid = new[['rem_paid_value']].sort_values('rem_paid_value', ascending=False).head(10).reset_index()\n",
        "top_ten_rem_rec = new[['rem_rec_value']].sort_values('rem_rec_value', ascending=False).head(10).reset_index()"
      ],
      "metadata": {
        "id": "fCuduH4FNI4W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "bACn935hOx71"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_top_countries(data, x_column, y_column, title):\n",
        "    plt.figure(figsize=(15, 7))\n",
        "    sns.barplot(data=data, x=x_column, y=y_column, color='violet')\n",
        "    plt.title(title)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "uH6TD9TYNJX8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_top_countries(top_ten_rem_paid, 'country name', 'rem_paid_value', 'Top Ten Remittance Paid Countries')"
      ],
      "metadata": {
        "id": "sj_AzaYYQ3hh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_top_countries(top_ten_rem_rec, 'country name', 'rem_rec_value', 'Top Ten Remittance Received Countries')"
      ],
      "metadata": {
        "id": "GOK2hR6PQwoW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_year = merged_df.groupby('year')[['rem_paid_value', 'rem_rec_value']].sum()\n",
        "top_ten_rem_paid_year = new_year[['rem_paid_value']].sort_values('rem_paid_value', ascending=False).head(10).reset_index()\n",
        "top_ten_rem_rec_year = new_year[['rem_rec_value']].sort_values('rem_rec_value', ascending=False).head(10).reset_index()"
      ],
      "metadata": {
        "id": "9QwgbvmSNJdv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_top_countries(top_ten_rem_paid_year, 'year', 'rem_paid_value', 'Top Ten Remittance Paid by year')"
      ],
      "metadata": {
        "id": "b5S625kdNJmf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plot_top_countries(top_ten_rem_rec_year, 'year', 'rem_rec_value', 'Top Ten Remittance Received by year')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "o-I6KwyMSSCa",
        "outputId": "ed78aba2-db3d-4d50-d802-0c45b2619e73"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# a focus on nigeria because it has the highest amount of remittance received in nigeria\n",
        "plot_top_countries(merged_df.query('`country name` == \"Nigeria\"'), 'year','rem_rec_value','Yearly Remittance received in Nigeria')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "BWvPcoT5SSe3",
        "outputId": "e4ac934b-20c2-409a-b249-c976aab215d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABNEAAAJwCAYAAACnPPcPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABjDUlEQVR4nO3dd3QVdf4//ldCCb1p6EVsrFgAsYGCDUHWhhUrYq8ryqofUVfEhq6r6NrLChZQQdeuKAroqtgoFlCsgCJgpSotmd8f/sjXmMCEGHKjPB7n3HPM3Peded65l+vNM++ZyUqSJAkAAAAAYLWyMx0AAAAAACo6JRoAAAAApFCiAQAAAEAKJRoAAAAApFCiAQAAAEAKJRoAAAAApFCiAQAAAEAKJRoAAAAApFCiAQAAAEAKJRoAsEbjx4+PrKysGD9+fKajrDMzZsyIrKysGDZsWKajrPcy+VpceumlkZWVlTqub9++sdFGG637QGuw2267xW677Zax7Zd0XwHAn4kSDQAqoJ49e0b9+vVj3rx5Re5bsGBBNGnSJHbcccfIz8/PQLrfZ9Uv36tuVapUiY022ijOOuusmD9/fqbjFXj22Wfj0ksvLbL8p59+iksvvfRPXSpSvlYV1VlZWTFx4sQi9/ft2zdq1aqVgWQAwK9VznQAAKCoW2+9Nbbaaqs455xzYsSIEYXuu/DCC+O7776L0aNHR3b2H/fvYbfddlvUqlUrlixZEi+99FLcdNNNMWnSpHj11VfLPUurVq3i559/jipVqhQse/bZZ+OWW24pUqT99NNPMWjQoIiIjM4E+rMq7rWoaO666651VmBfeuml8dRTT6WOe+GFF9bJ9kvq4osvjgsuuCCjGQCgvP1xv3kDwJ9Y69atY+DAgfHggw8W+mX57bffjttvvz369+8f7dq1W6cZli5duk5nuh1yyCFx9NFHxymnnBIjR46M3r17x2uvvRZvvfXWOtvm6mRlZUW1atWiUqVK5b7timjJkiUZ2/Yf4bWoUqVK5OTklPl627dvH08//XRMmjQpdWzVqlWjatWqZZ4hzar3RuXKlaNatWrlvn0AyCQlGgBUUP37949tttkmTj/99Fi6dGnk5eXFqaeeGq1atYqBAwfGRx99FIccckg0aNAgqlWrFtttt108+eSThdbxww8/xLnnnhtbb7111KpVK+rUqRM9e/aMd999t9C4VYeTPfTQQ3HxxRdHs2bNokaNGrFw4cIiuQYOHBhVqlSJb7/9tsh9J598ctSrVy+WLl261s+3S5cuERHx2WefFVr+5ptvxt577x1169aNGjVqxK677hqvvfZaoTGrDhH9+OOP4+ijj466detGbm5u/OMf/4gkSeLLL7+MAw44IOrUqRONGzeO6667rtDjf3serr59+8Ytt9wSEVHo0NMZM2ZEbm5uREQMGjSoYPmq2Wrvvfde9O3bNzbeeOOoVq1aNG7cOI4//vj4/vvvi8376aefRt++faNevXpRt27dOO644+Knn34qsm8eeOCB2GGHHaJGjRpRv3796Nq1a5GZSM8991x06dIlatasGbVr14599tknpk6dmrrfhw0bFllZWfHyyy/H6aefHg0bNozmzZuv9Xo/+uijOOywwyI3NzeqV68ebdq0iYsuuqjQmNmzZ8fxxx8fjRo1ipycnNhyyy3jnnvuWeNr8a9//SuysrJi5syZRbY5YMCAqFq1avz4448Fy0ryfomIePXVV2P77bePatWqxSabbBJ33HFH6r5a5bfnRFuV+V//+lfceeedsckmm0ROTk5sv/328fbbb5d4vX/729+ifv36xR5G/FvFnRNt5syZsf/++0fNmjWjYcOGcc4558Tzzz9f7DkN1+bf1bRp0+LII4+M+vXrxy677FLovl8bOnRo7LHHHtGwYcPIycmJtm3bxm233Vbi5w8AFZ3DOQGggqpcuXLceeed0blz57j88sujYcOGMWnSpBg9enR88cUXsfPOO0ezZs3iggsuiJo1a8bIkSOjV69e8eijj8aBBx4YERGff/55PP7443HooYdG69atY968eXHHHXfErrvuGtOmTYumTZsW2ubll18eVatWjXPPPTeWLVtW7EyXY445Ji677LJ4+OGH48wzzyxYvnz58njkkUfi4IMPLtUMlRkzZkRERP369QuWjR07Nnr27BkdO3aMgQMHRnZ2dsEv6v/73/9ihx12KLSO3r17xxZbbBFXX311PPPMM3HFFVdEgwYN4o477og99tgjrrnmmhg+fHice+65sf3220fXrl2LzXLKKafE119/HWPGjIn777+/YHlubm7cdtttcdppp8WBBx4YBx10UEREbLPNNhERMWbMmPj888/juOOOi8aNG8fUqVPjzjvvjKlTp8Ybb7xRpHQ47LDDonXr1jF48OCYNGlS3H333dGwYcO45pprCsYMGjQoLr300ujcuXNcdtllUbVq1XjzzTdj7Nix0b1794iIuP/+++PYY4+NHj16xDXXXBM//fRT3HbbbbHLLrvE5MmTS3QS/NNPPz1yc3PjkksuKZhtVNL1vvfee9GlS5eoUqVKnHzyybHRRhvFZ599Fk899VRceeWVERExb9682GmnnSIrKyvOPPPMyM3Njeeeey5OOOGEWLhwYZx99tnF5jrssMPi/PPPj5EjR8Z5551X6L6RI0dG9+7dC94zJX2/vP/++9G9e/fIzc2NSy+9NFauXBkDBw6MRo0ape6nNRkxYkQsWrQoTjnllMjKyop//vOfcdBBB8Xnn39eosNT69SpE+ecc05ccsklMWnSpNh2221LvO0lS5bEHnvsEXPmzIl+/fpF48aNY8SIETFu3LgiY9f239Whhx4am222WVx11VWRJMlqM9x2222x5ZZbxv777x+VK1eOp556Kk4//fTIz8+PM844o8TPBQAqrAQAqNDOPPPMpEqVKkmtWrWSI444IkmSJNlzzz2TrbfeOlm6dGnBuPz8/KRz587JZpttVrBs6dKlSV5eXqH1ffHFF0lOTk5y2WWXFSwbN25cEhHJxhtvnPz000+Fxq+6b9y4cQXLOnXqlOy4446Fxv33v/8tMq44AwcOTCIimT59evLtt98mM2bMSO65556kevXqSW5ubrJkyZKC57PZZpslPXr0SPLz8wse/9NPPyWtW7dO9tprryLrPPnkkwuWrVy5MmnevHmSlZWVXH311QXLf/zxx6R69erJscceW2ifREQydOjQgmVnnHFGUtxXpW+//TaJiGTgwIFF7vvtvkuSJHnwwQeTiEheeeWVInmPP/74QmMPPPDAZIMNNij4+ZNPPkmys7OTAw88sMjruGqfLFq0KKlXr15y0kknFbp/7ty5Sd26dYss/62hQ4cmEZHssssuycqVKwuWr816u3btmtSuXTuZOXNmsRmTJElOOOGEpEmTJsl3331XaMzhhx+e1K1bt2DfFfdadOrUKenYsWOhx7311ltJRCT33XdfwbZK+n7p1atXUq1atUJ5p02bllSqVKnY1/y3jj322KRVq1YFP6/KvMEGGyQ//PBDwfInnngiiYjkqaeeWuP6Vv0bGzVqVDJ//vykfv36yf77719oezVr1iz0mF133TXZddddC36+7rrrkohIHn/88YJlP//8c/KXv/yl0L/L0vy7WvW582ur7vu14t7/PXr0SDbeeOM1Pn8A+KNwOCcAVHBXXnllbLDBBpGdnR1DhgyJH374IcaOHRuHHXZYLFq0KL777rv47rvv4vvvv48ePXrEJ598ErNnz46IiJycnIKLD+Tl5cX3338ftWrVijZt2hR73qVjjz02qlevnpqpT58+8eabbxY69HL48OHRokWL2HXXXUv0vNq0aRO5ubmx0UYbxfHHHx+bbrppPPfcc1GjRo2IiJgyZUp88sknceSRR8b3339f8DyXLFkSe+65Z7zyyitFztl24oknFvx3pUqVYrvttoskSeKEE04oWF6vXr1o06ZNfP755yXKuTZ+ve+WLl0a3333Xey0004REcXu71NPPbXQz126dInvv/++4DDaxx9/PPLz8+OSSy4pchGJVbPaxowZE/Pnz48jjjiiYB999913UalSpdhxxx2LnYlUnJNOOqnQechKut5vv/02XnnllTj++OOjZcuWxWZMkiQeffTR2G+//SJJkkLr69GjRyxYsGCN5wHr3bt3TJw4sdD77eGHH46cnJw44IADIqLk75e8vLx4/vnno1evXoXybrHFFtGjR48S7as15fz1TMpVhyivzXutbt26cfbZZ8eTTz4ZkydPLvHjRo8eHc2aNYv999+/YFm1atXipJNOKjSuNP+ufvs+XZ1fv/8XLFgQ3333Xey6667x+eefx4IFC0r8XACgolqvS7RXXnkl9ttvv2jatGlkZWXF448/vlaPX7p0afTt2ze23nrrqFy5cvTq1avYcePHj49tt902cnJyYtNNNy04xwcAlESdOnWiTZs20aJFi2jUqFF8+umnkSRJ/OMf/4jc3NxCt4EDB0ZExDfffBMREfn5+TFkyJDYbLPNIicnJzbccMPIzc2N9957r9hfalu3bl2iTL17946cnJwYPnx4RPzyC/PTTz8dRx11VJFDFlfn0UcfjTFjxsSIESNip512im+++abQL+GffPJJRPxS7P32ed59992xbNmyIs/htyVO3bp1o1q1arHhhhsWWf7r82iVlR9++CH69esXjRo1iurVq0dubm7BPi1uf/8276oCZlW2zz77LLKzs6Nt27ar3eaq/bTHHnsU2U8vvPBCwXshzW9f+5Kud1VBtNVWW6123d9++23Mnz8/7rzzziLrOu644yIi1pjz0EMPjezs7Hj44Ycj4pdSbtSoUdGzZ8+oU6dOobxp75dvv/02fv7559hss82KbKdNmzYl2lerk/Z6llS/fv2iXr16JTo32iozZ86MTTbZpMi/v0033bTQz6X5d1XSz4XXXnstunXrFjVr1ox69epFbm5uXHjhhRFR/PsfAP5o1utzoi1ZsiTatWsXxx9/fME5TdZGXl5eVK9ePc4666x49NFHix3zxRdfxD777BOnnnpqDB8+PF566aU48cQTo0mTJr/7r50ArJ9WzRI599xzV/v/klW/OF911VXxj3/8I44//vi4/PLLo0GDBpGdnR1nn312sVfeLMkstIhfyoF99903hg8fHpdcckk88sgjsWzZsjj66KNL/Dy6du1aUG7tt99+sfXWW8dRRx0VEydOjOzs7IJ81157bbRv377YddSqVavQz8Vd0XF1V3lM1nBup9I67LDD4vXXX4/zzjsv2rdvH7Vq1Yr8/PzYe++9i93fZZFt1Xrvv//+aNy4cZH7K1cu2de93772ZbXeX6/r6KOPjmOPPbbYMavOK1ecpk2bRpcuXWLkyJFx4YUXxhtvvBGzZs0qdO64kr5fli1bVuLca6us3murZqNdeumlazUbrSRK8++qJJ8Ln332Wey5557xl7/8Ja6//vpo0aJFVK1aNZ599tkYMmTIOr3SLwCUl/W6ROvZs2f07NlztfcvW7YsLrroonjwwQdj/vz5sdVWW8U111xTcCWkmjVrFlxx6LXXXov58+cXWcftt98erVu3LrgK2BZbbBGvvvpqDBkyRIkGQKlsvPHGERFRpUqV6Nat2xrHPvLII7H77rvHf/7zn0LL58+fX2R21trq06dPHHDAAfH222/H8OHDo0OHDrHllluWal21atWKgQMHxnHHHRcjR46Mww8/PDbZZJOI+GUmXtrzXBdWN6Nudct//PHHeOmll2LQoEFxySWXFCxfNfOnNDbZZJPIz8+PadOmrbbwWLWfGjZsWKb7qaTrXfV+/OCDD1Y7Jjc3N2rXrh15eXmlzti7d+84/fTTY/r06fHwww9HjRo1Yr/99iuSN+39surqocW9LtOnTy9VtnXh7LPPjhtuuCEGDRoU9erVSx3fqlWrmDZtWiRJUug9+umnnxYat67+XT311FOxbNmyePLJJwvNyCvp4cQA8EewXh/OmebMM8+MCRMmxEMPPRTvvfdeHHroobH33nuv1ZfhCRMmFPmC0qNHj5gwYUJZxwVgPdGwYcPYbbfd4o477og5c+YUuf/bb78t+O9KlSoVmQUzatSognOm/R49e/aMDTfcMK655pp4+eWX12oWWnGOOuqoaN68ecHsoo4dO8Ymm2wS//rXv2Lx4sVFxv/6ea4LNWvWjIgo8keyVeds++3yVbOQfru/b7jhhlJn6NWrV2RnZ8dll11WZCbPqu306NEj6tSpE1dddVWsWLGiyDpKu59Kut7c3Nzo2rVr3HPPPTFr1qxiM1aqVCkOPvjgePTRR4st20qS8eCDD45KlSrFgw8+GKNGjYp999234DWKKPn7pVKlStGjR494/PHHC+X98MMP4/nnn0/NUV5WzUZ74oknYsqUKanje/ToEbNnz44nn3yyYNnSpUvjrrvuKjRuXf27Ku79v2DBghg6dGip1gcAFdF6PRNtTWbNmhVDhw6NWbNmRdOmTSPil8NmRo8eHUOHDo2rrrqqROuZO3dukculN2rUKBYuXBg///xziQ+bAYBfu+WWW2KXXXaJrbfeOk466aTYeOONY968eTFhwoT46quv4t13342IiH333Tcuu+yyOO6446Jz587x/vvvx/DhwwtmD/0eVapUicMPPzxuvvnmqFSpUhxxxBG/e339+vWL8847L0aPHh1777133H333dGzZ8/Ycsst47jjjotmzZrF7NmzY9y4cVGnTp146qmnfvfzWJ2OHTtGRMRZZ50VPXr0iEqVKsXhhx8e1atXj7Zt28bDDz8cm2++eTRo0CC22mqr2GqrraJr167xz3/+M1asWBHNmjWLF154Ib744otSZ9h0003joosuissvvzy6dOkSBx10UOTk5MTbb78dTZs2jcGDB0edOnXitttui2OOOSa23XbbOPzwwyM3NzdmzZoVzzzzTOy8885x8803r/W212a9//73v2OXXXaJbbfdNk4++eRo3bp1zJgxI5555pmCAujqq6+OcePGxY477hgnnXRStG3bNn744YeYNGlSvPjii/HDDz+sMU/Dhg1j9913j+uvvz4WLVoUvXv3LnR/dnZ2id8vgwYNitGjR0eXLl3i9NNPj5UrV8ZNN90UW265Zbz33ntrva/WlX79+sWQIUPi3XffLVQYFueUU06Jm2++OY444ojo169fNGnSJIYPHx7VqlWLiP83g3Jt9tPa6N69e1StWjX222+/OOWUU2Lx4sVx1113RcOGDYst+wHgj0iJthrvv/9+5OXlxeabb15o+bJly2KDDTbIUCoA+EXbtm3jnXfeiUGDBsWwYcPi+++/j4YNG0aHDh0KHUp44YUXxpIlS2LEiBHx8MMPx7bbbhvPPPNMXHDBBWWSo0+fPnHzzTfHnnvuGU2aNPnd6zv55JPjiiuuiKuvvjr23nvv2G233WLChAlx+eWXx8033xyLFy+Oxo0bx4477hinnHJKGTyD1TvooIPib3/7Wzz00EPxwAMPRJIkcfjhh0dExN133x1/+9vf4pxzzonly5fHwIEDY6uttooRI0bE3/72t7jlllsiSZLo3r17PPfccwV/kCuNyy67LFq3bh033XRTXHTRRVGjRo3YZptt4phjjikYc+SRR0bTpk3j6quvjmuvvTaWLVsWzZo1iy5duhScuL80Srredu3axRtvvBH/+Mc/4rbbboulS5dGq1at4rDDDisY06hRo3jrrbfisssui//+979x6623xgYbbBBbbrlloXObrUnv3r3jxRdfjNq1a8df//rXIveX9P2yzTbbxPPPPx/9+/ePSy65JJo3bx6DBg2KOXPmVKgSrV69enH22WfHoEGDUsfWqlUrxo4dG3/729/ixhtvjFq1akWfPn2ic+fOcfDBBxeUaREl309ro02bNvHII4/ExRdfHOeee240btw4TjvttMjNzY3jjz++VOsEgIomK1kXZ9X9A8rKyorHHnus4AqbDz/8cBx11FExderUIieJrVWrVpET7Pbt2zfmz59f5AqfXbt2jW233bbQoRxDhw6Ns88+21WKAPjDe/fdd6N9+/Zx3333FSp1gIrhhhtuiHPOOSe++uqraNasWabjAMAfmploq9GhQ4fIy8uLb775Jrp06VLq9XTq1CmeffbZQsvGjBkTnTp1+r0RASDj7rrrrqhVq1aprnINlK3fnipk6dKlcccdd8Rmm22mQAOAMrBel2iLFy8udMWiL774IqZMmRINGjSIzTffPI466qjo06dPXHfdddGhQ4f49ttv46WXXoptttkm9tlnn4iImDZtWixfvjx++OGHWLRoUcF5P1ZdQevUU0+Nm2++Oc4///w4/vjjY+zYsTFy5Mh45plnyvvpAkCZeeqpp2LatGlx5513xplnnpl6viZg3TvooIOiZcuW0b59+1iwYEE88MAD8dFHH8Xw4cMzHQ0A/hTW68M5x48fH7vvvnuR5ccee2wMGzYsVqxYEVdccUXcd999MXv27Nhwww1jp512ikGDBsXWW28dEREbbbRRzJw5s8g6fr1bx48fH+ecc05MmzYtmjdvHv/4xz+ib9++6+x5AcC6ttFGG8W8efOiR48ecf/990ft2rUzHQnWezfccEPcfffdMWPGjMjLy4u2bdvG+eefX+QiDABA6azXJRoAAAAAlER2pgMAAAAAQEWnRAMAAACAFOvdhQXy8/Pj66+/jtq1a0dWVlam4wAAAACQQUmSxKJFi6Jp06aRnb36+WbrXYn29ddfR4sWLTIdAwAAAIAK5Msvv4zmzZuv9v71rkRbdfWwL7/8MurUqZPhNAAAAABk0sKFC6NFixapV5xf70q0VYdw1qlTR4kGAAAAQERE6mm/XFgAAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAgRUZLtMGDB8f2228ftWvXjoYNG0avXr1i+vTpa3zMsGHDIisrq9CtWrVq5ZQYAAAAgPVRRku0l19+Oc4444x44403YsyYMbFixYro3r17LFmyZI2Pq1OnTsyZM6fgNnPmzHJKDAAAAMD6qHImNz569OhCPw8bNiwaNmwYEydOjK5du672cVlZWdG4ceN1HQ8AAAAAIqKCnRNtwYIFERHRoEGDNY5bvHhxtGrVKlq0aBEHHHBATJ06dbVjly1bFgsXLix0AwAAAIC1UWFKtPz8/Dj77LNj5513jq222mq149q0aRP33HNPPPHEE/HAAw9Efn5+dO7cOb766qtixw8ePDjq1q1bcGvRosW6egoAAAAA/EllJUmSZDpERMRpp50Wzz33XLz66qvRvHnzEj9uxYoVscUWW8QRRxwRl19+eZH7ly1bFsuWLSv4eeHChdGiRYtYsGBB1KlTp0yyAwAAAPDHtHDhwqhbt25qV5TRc6KtcuaZZ8bTTz8dr7zyyloVaBERVapUiQ4dOsSnn35a7P05OTmRk5NTFjEBAAAAWE9l9HDOJEnizDPPjMceeyzGjh0brVu3Xut15OXlxfvvvx9NmjRZBwkBAAAAIMMz0c4444wYMWJEPPHEE1G7du2YO3duRETUrVs3qlevHhERffr0iWbNmsXgwYMjIuKyyy6LnXbaKTbddNOYP39+XHvttTFz5sw48cQTM/Y8AAAAAPhzy2iJdtttt0VExG677VZo+dChQ6Nv374RETFr1qzIzv5/E+Z+/PHHOOmkk2Lu3LlRv3796NixY7z++uvRtm3b8ooNAAAAwHqmwlxYoLyU9GRxAAAAAPz5lbQryug50QAAAADgj0CJBgAAAAAplGgAAAAAkEKJBgAAAAAplGgAAAAAkEKJBgAAAAAplGgAAAAAkKJypgMAAAAAf1yzbpxV7tts2a9luW8TzEQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIUTnTAQAAAADKyqwbZ5X7Nlv2a1nu26T8mYkGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQonKmAwAAAAAlN+vGWeW+zZb9Wpb7NqGiMRMNAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFIo0QAAAAAghRINAAAAAFJUznQAAAAAMmfWjbPKfZst+7Us920C/F5mogEAAABACiUaAAAAAKRQogEAAABACiUaAAAAAKRwYQEAAIBy4iT+AH9cZqIBAAAAQAolGgAAAACkcDgnAABQZhyuyO/lPQRUVGaiAQAAAEAKM9EAAIA/LbOaACgrZqIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQIqMlmiDBw+O7bffPmrXrh0NGzaMXr16xfTp01MfN2rUqPjLX/4S1apVi6233jqeffbZckgLAAAAwPqqciY3/vLLL8cZZ5wR22+/faxcuTIuvPDC6N69e0ybNi1q1qxZ7GNef/31OOKII2Lw4MGx7777xogRI6JXr14xadKk2Gqrrcr5GQAAAADwe8y6cVa5b7Nlv5Zr/ZiMlmijR48u9POwYcOiYcOGMXHixOjatWuxj7nxxhtj7733jvPOOy8iIi6//PIYM2ZM3HzzzXH77bcXGb9s2bJYtmxZwc8LFy4sw2cAAAAAwPqgQp0TbcGCBRER0aBBg9WOmTBhQnTr1q3Qsh49esSECROKHT948OCoW7duwa1FixZlFxgAAACA9UKFKdHy8/Pj7LPPjp133nmNh2XOnTs3GjVqVGhZo0aNYu7cucWOHzBgQCxYsKDg9uWXX5ZpbgAAAAD+/DJ6OOevnXHGGfHBBx/Eq6++WqbrzcnJiZycnDJdJwAAAADrlwpRop155pnx9NNPxyuvvBLNmzdf49jGjRvHvHnzCi2bN29eNG7ceF1GBAAAAGA9ltHDOZMkiTPPPDMee+yxGDt2bLRu3Tr1MZ06dYqXXnqp0LIxY8ZEp06d1lVMAAAAANZzGZ2JdsYZZ8SIESPiiSeeiNq1axec16xu3bpRvXr1iIjo06dPNGvWLAYPHhwREf369Ytdd901rrvuuthnn33ioYceinfeeSfuvPPOjD0PAAAAAP7cMlqi3XbbbRERsdtuuxVaPnTo0Ojbt29ERMyaNSuys//fhLnOnTvHiBEj4uKLL44LL7wwNttss3j88cfXeDECAAD4M5p146xy32bLfi3LfZsAUBFktERLkiR1zPjx44ssO/TQQ+PQQw9dB4kAAADg/1FWA6tk9JxoAAAAAPBHoEQDAAAAgBRKNAAAAABIkdFzogEAAABQvpzrr3TMRAMAAACAFEo0AAAAAEihRAMAAACAFEo0AAAAAEihRAMAAACAFK7OCQBAheXqYQBARWEmGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkUKIBAAAAQAolGgAAAACkqJzpAAAA8Ecx68ZZ5b7Nlv1alvs2AYCizEQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIoUQDAAAAgBRKNAAAAABIUTnTAQAAqBhm3Tir3LfZsl/Lct8mAEBpmIkGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQonKmAwAAAAD8mc26cVa5b7Nlv5blvs0/OzPRAAAAACCFEg0AAAAAUijRAAAAACCFEg0AAAAAUijRAAAAACCFq3MCAGSIK3UBAPxxmIkGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQQokGAAAAACmUaAAAAACQIqMl2iuvvBL77bdfNG3aNLKysuLxxx9f4/jx48dHVlZWkdvcuXPLJzAAAAAA66WMlmhLliyJdu3axS233LJWj5s+fXrMmTOn4NawYcN1lBAAAAAAIipncuM9e/aMnj17rvXjGjZsGPXq1Sv7QAAAAABQjD/kOdHat28fTZo0ib322itee+21NY5dtmxZLFy4sNANAAAAANZGqUu0lStXxosvvhh33HFHLFq0KCIivv7661i8eHGZhfutJk2axO233x6PPvpoPProo9GiRYvYbbfdYtKkSat9zODBg6Nu3boFtxYtWqyzfAAAAAD8OZXqcM6ZM2fG3nvvHbNmzYply5bFXnvtFbVr145rrrkmli1bFrfffntZ54yIiDZt2kSbNm0Kfu7cuXN89tlnMWTIkLj//vuLfcyAAQOif//+BT8vXLhQkQYAAADAWinVTLR+/frFdtttFz/++GNUr169YPmBBx4YL730UpmFK4kddtghPv3009Xen5OTE3Xq1Cl0AwAAAIC1UaqZaP/73//i9ddfj6pVqxZavtFGG8Xs2bPLJFhJTZkyJZo0aVKu2wQAAABg/VKqEi0/Pz/y8vKKLP/qq6+idu3aJV7P4sWLC80i++KLL2LKlCnRoEGDaNmyZQwYMCBmz54d9913X0RE3HDDDdG6devYcsstY+nSpXH33XfH2LFj44UXXijN0wAAAACAEinV4Zzdu3ePG264oeDnrKysWLx4cQwcODD++te/lng977zzTnTo0CE6dOgQERH9+/ePDh06xCWXXBIREXPmzIlZs2YVjF++fHn8/e9/j6233jp23XXXePfdd+PFF1+MPffcszRPAwAAAABKpFQz0a677rro0aNHtG3bNpYuXRpHHnlkfPLJJ7HhhhvGgw8+WOL17LbbbpEkyWrvHzZsWKGfzz///Dj//PNLExkAAAAASq1UJVrz5s3j3XffjYceeijee++9WLx4cZxwwglx1FFHFbrQAAAAAAD8GZSqRIuIqFy5chx99NFlmQUAYJ2adeOs9EFlrGW/luW+TQAAyl6pSrRVJ/pfnT59+pQqDAAAAABURKUq0fr161fo5xUrVsRPP/0UVatWjRo1aijRAAAAAPhTKdXVOX/88cdCt8WLF8f06dNjl112WasLCwAAAADAH0GpSrTibLbZZnH11VcXmaUGAAAAAH90ZVaiRfxysYGvv/66LFcJAAAAABlXqnOiPfnkk4V+TpIk5syZEzfffHPsvPPOZRIMAAAAACqKUpVovXr1KvRzVlZW5Obmxh577BHXXXddWeQCAAAAgAqjVCVafn5+WecAAAAAgAqrTM+JBgAAAAB/RiWeida/f/8Sr/T6668vVRgAAAAAqIhKXKJNnjy5ROOysrJKHQYAAAAAKqISl2jjxo1blzkAAAAAoMJyTjQAAAAASFGqq3NGRLzzzjsxcuTImDVrVixfvrzQff/9739/dzAAAAAAqChKNRPtoYceis6dO8eHH34Yjz32WKxYsSKmTp0aY8eOjbp165Z1RgAAAADIqFKVaFdddVUMGTIknnrqqahatWrceOON8dFHH8Vhhx0WLVu2LOuMAAAAAJBRpSrRPvvss9hnn30iIqJq1aqxZMmSyMrKinPOOSfuvPPOMg0IAAAAAJlWqhKtfv36sWjRooiIaNasWXzwwQcRETF//vz46aefyi4dAAAAAFQApbqwQNeuXWPMmDGx9dZbx6GHHhr9+vWLsWPHxpgxY2LPPfcs64wAAAAAkFGlKtFuvvnmWLp0aUREXHTRRVGlSpV4/fXX4+CDD46LL764TAMCAAAAQKaVqkRr0KBBwX9nZ2fHBRdcUGaBAAAAAKCiKdU50bp16xbDhg2LhQsXlnUeAAAAAKhwSlWibbnlljFgwIBo3LhxHHroofHEE0/EihUryjobAAAAAFQIpSrRbrzxxpg9e3Y8/vjjUbNmzejTp080atQoTj755Hj55ZfLOiMAAAAAZFSpSrSIX86F1r179xg2bFjMmzcv7rjjjnjrrbdijz32KMt8AAAAAJBxpbqwwK/NnTs3HnrooXjggQfivffeix122KEscgEAAABAhVGqmWgLFy6MoUOHxl577RUtWrSI2267Lfbff//45JNP4o033ijrjAAAAACQUaWaidaoUaOoX79+9O7dOwYPHhzbbbddWecCAAAAgAqjVCXak08+GXvuuWdkZ695Ittrr70W2223XeTk5JQqHAAAAABUBKU6nHOvvfZKLdAiInr27BmzZ88uzSYAAAAAoMIo9dU5SyJJknW5egAAAAAoF+u0RAMAAACAPwMlGgAAAACkUKIBAAAAQIp1WqJlZWWty9UDAAAAQLlwYQEAAAAASFG5NA/64osvYuXKlbHZZpsVWv7JJ59ElSpVYqONNoqIiEWLFv3ugAAAAACQaaWaida3b994/fXXiyx/8803o2/fvr83EwAAAABUKKUq0SZPnhw777xzkeU77bRTTJky5fdmAgAAAIAKpVQlWlZWVrGHai5YsCDy8vJ+dygAAAAAqEhKVaJ17do1Bg8eXKgwy8vLi8GDB8cuu+xSZuEAAAAAoCIo1YUFrrnmmujatWu0adMmunTpEhER//vf/2LhwoUxduzYMg0IAAAAAJlWqplobdu2jffeey8OO+yw+Oabb2LRokXRp0+f+Oijj2KrrbYq64wAAAAAkFGlmokWEdG0adO46qqryjILAAAAAFRIpZqJFvHL4ZtHH310dO7cOWbPnh0REffff3+8+uqrZRYOAAAAACqCUpVojz76aPTo0SOqV68ekyZNimXLlkXEL1fnNDsNAAAAgD+bUpVoV1xxRdx+++1x1113RZUqVQqW77zzzjFp0qQyCwcAAAAAFUGpSrTp06dH165diyyvW7duzJ8///dmAgAAAIAKpVQlWuPGjePTTz8tsvzVV1+NjTfe+HeHAgAAAICKpFQl2kknnRT9+vWLN998M7KysuLrr7+O4cOHx7nnnhunnXZaWWcEAAAAgIyqXJoHXXDBBZGfnx977rln/PTTT9G1a9fIycmJc889N/72t7+VdUYAAAAAyKi1LtHy8vLitddeizPOOCPOO++8+PTTT2Px4sXRtm3bqFWr1rrICAAAAAAZtdYlWqVKlaJ79+7x4YcfRr169aJt27brIhcAAAAAVBilOifaVlttFZ9//nlZZwEAAACACqlUJdoVV1wR5557bjz99NMxZ86cWLhwYaEbAAAAAPyZlOrCAn/9618jImL//fePrKysguVJkkRWVlbk5eWVTToAAAAAqABKVaKNGzeurHMAAAAAQIVVqhJt1113LdG4008/PS677LLYcMMNS7MZAAAAAKgQSnVOtJJ64IEHnCMNAAAAgD+8dVqiJUmyLlcPAAAAAOVinZZoAAAAAPBnoEQDAAAAgBRKNAAAAABIoUQDAAAAgBTrtEQ7+uijo06dOutyEwAAAACwzlUu7QOXLl0a7733XnzzzTeRn59f6L79998/IiJuu+2235cOAAAAACqAUpVoo0ePjj59+sR3331X5L6srKzIy8v73cEAAAAAoKIo1eGcf/vb3+LQQw+NOXPmRH5+fqGbAg0AAACAP5tSlWjz5s2L/v37R6NGjco6DwAAAABUOKUq0Q455JAYP358GUcBAAAAgIqpVOdEu/nmm+PQQw+N//3vf7H11ltHlSpVCt1/1llnlUk4AAAAAKgISlWiPfjgg/HCCy9EtWrVYvz48ZGVlVVwX1ZWlhINAAAAgD+VUpVoF110UQwaNCguuOCCyM4u1RGhAAAAAPCHUaoGbPny5dG7d28FGgAAAADrhVK1YMcee2w8/PDDZZ0FAAAAACqkUh3OmZeXF//85z/j+eefj2222abIhQWuv/76MgkHAAAAABVBqUq0999/Pzp06BARER988EGh+359kQEAAAAA+DMoVYk2bty4ss4BAAAAABXW77oywKeffhrPP/98/PzzzxERkSRJmYQCAAAAgIqkVCXa999/H3vuuWdsvvnm8de//jXmzJkTEREnnHBC/P3vfy/TgAAAAACQaaUq0c4555yoUqVKzJo1K2rUqFGwvHfv3jF69OgyCwcAAAAAFUGpzon2wgsvxPPPPx/NmzcvtHyzzTaLmTNnlkkwAAAAAKgoSjUTbcmSJYVmoK3yww8/RE5Ozu8OBQAAAAAVSalKtC5dusR9991X8HNWVlbk5+fHP//5z9h9993LLBwAAAAAVASlOpzz2muvjT322CPeeeedWL58eZx//vkxderU+OGHH+K1114r64wAAAAAkFFrXaKtWLEizjrrrHjqqadizJgxUbt27Vi8eHEcdNBBccYZZ0STJk3WRU4AAAAAyJi1LtGqVKkS7733XtSvXz8uuuiidZEJAAAAACqUUp0T7eijj47//Oc/ZZ0FAAAAACqkUp0TbeXKlXHPPffEiy++GB07doyaNWsWuv/6668vk3AAAAAAUBGUqkT74IMPYtttt42IiI8//rjQfVlZWb8/FQAAAABUIKUq0caNG1fWOQAAAACgwirVOdEAAAAAYH2iRAMAAACAFBkt0V555ZXYb7/9omnTppGVlRWPP/546mPGjx8f2267beTk5MSmm24aw4YNW+c5AQAAAFi/ZbREW7JkSbRr1y5uueWWEo3/4osvYp999ondd989pkyZEmeffXaceOKJ8fzzz6/jpAAAAACsz0p1YYGy0rNnz+jZs2eJx99+++3RunXruO666yIiYosttohXX301hgwZEj169FhXMQEAAABYz/2hzok2YcKE6NatW6FlPXr0iAkTJqz2McuWLYuFCxcWugEAAADA2vhDlWhz586NRo0aFVrWqFGjWLhwYfz888/FPmbw4MFRt27dgluLFi3KIyoAAAAAfyJ/qBKtNAYMGBALFiwouH355ZeZjgQAAADAH0xGz4m2tho3bhzz5s0rtGzevHlRp06dqF69erGPycnJiZycnPKIBwAAAMCf1B9qJlqnTp3ipZdeKrRszJgx0alTpwwlAgAAAGB9kNESbfHixTFlypSYMmVKRER88cUXMWXKlJg1a1ZE/HIoZp8+fQrGn3rqqfH555/H+eefHx999FHceuutMXLkyDjnnHMyER8AAACA9URGS7R33nknOnToEB06dIiIiP79+0eHDh3ikksuiYiIOXPmFBRqERGtW7eOZ555JsaMGRPt2rWL6667Lu6+++7o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xNh9991jv/32i8mTJ2ckT82aNePMM8+MV155JT788MO4+OKL4+KLL44777wzI3lWmT9/fvTp0yf23HPPjL9mq0yfPr3QZ1LDhg0zluewww6Ll156Kf7zn//E9OnT48EHH4w2bdpkJM+NN95YaL98+eWX0aBBgzj00EMz9pq99tpr0adPnzjhhBNi6tSpMWrUqHjrrbfipJNOykie2267LQYMGBCXXnppTJ06NQYNGhRnnHFGPPXUU2WeZ5Xjjz8+evfuXWR5RMTChQuje/fu0apVq5g4cWJce+21cemllxb5d1+emfLy8qJ69epx1llnRbdu3YodU555Xn/99dhmm23i0Ucfjffeey+OO+646NOnTzz99NMZyVOlSpXo06dPvPDCCzF9+vS44YYb4q677oqBAwdmbB+tsmLFijjiiCOiS5cuxd5f3nlefPHFQp9JHTt2zFiefv36xd133x3/+te/4qOPPoonn3wydthhh4zto3PPPbfI9+u2bdsW+bwurzxffPFFHHDAAbHHHnvElClT4vnnn4/vvvuuyHrKK89zzz0XRx11VJx66qnxwQcfxK233hpDhgyJm2++ucjYssg0ceLEaNiwYTzwwAMxderUuOiii2LAgAGFtlee361Lkqek363LK09Jv1enSkiSJEkiInnssccKfp4+fXoSEckHH3xQsCwvLy/Jzc1N7rrrriRJkuT5559PsrOzkwULFhSMmT9/fpKVlZWMGTOmyDaGDh2a1K1bt0JlWuWf//xn0rp16wqT54knnkiysrKS5cuXZyzPs88+m/zlL39Jpk6dmkREMnny5NVmKY9MrVq1SoYMGZKaoTzyrFixImnWrFly9913V4g8v7V8+fIkNzc3ueyyyzKW6dtvv00iInnllVcKxixcuDCJiDW+99dVnjvuuCNp2LBhkpeXVzDmvffeSyIi+eSTT9a4j7755pskIpKXX365YN1VqlRJRo0aVTDmww8/TCIimTBhQpIkv/z7yc7OTubOnVsw5rbbbkvq1KmTLFu2LEmSJDn//POTLbfcstC2evfunfTo0SMjeX5t1113Tfr167fGHOWdaZW2bdsmgwYNqjB5DjzwwOToo4/OaJ7evXsnF198cTJw4MCkXbt2a8yyrjONGzcuiYjkxx9/LFGOdZ3nueeeS+rWrZt8//33FSLPbz322GNJVlZWMmPGjIxluvbaa5ONN9640Lb+/e9/J82aNctInk6dOiXnnntuoW31798/2Xnnncs8z6+t7t/PrbfemtSvX7/Qa/h///d/SZs2bdaYZ11m+rVjjz02OeCAA1KzlFeeVf76178mxx13XIXJc8455yS77LJL6rh1nen8889Pjj766BL/XrSu8nzxxRcl/n5fHnmmTZuWVK5cOfnoo4/WKs+6zPRbU6ZMKfLdtjzzjBo1KqlcuXKh77JPPvlk6u+M6yrPEUcckRxyyCGFlv373/9OmjdvnuTn5682T1lkWuX0009Pdt9994Kfy/O7dUny/NrafLcujzyrlOR79W+t1zPR1mTZsmUREVGtWrWCZdnZ2ZGTkxOvvvpqwZisrKzIyckpGFOtWrXIzs4uGPNHybRgwYJo0KBBhcjzww8/xPDhw6Nz585RpUqVjOSZN29enHTSSXH//fdHjRo1SpxhXWaKiLj66qtjgw02iA4dOsS111672sOa1nWeSZMmxezZsyM7Ozs6dOgQTZo0iZ49e8YHH3yQkTy/9eSTT8b3338fxx133FrlKctMG2ywQcEhOEuWLImVK1fGHXfcEQ0bNizyV87yyLNs2bKoWrVqZGf/v4/96tWrR0Skfl4tWLAgIqLgM2LixImxYsWKQn/9/8tf/hItW7aMCRMmRETEhAkTYuutt45GjRoVjOnRo0csXLgwpk6dWjDmtzMIevToUbCO8s7ze5RXpvz8/Fi0aFHq53V55Zk8eXK8/vrrseuuu2Ysz9ChQ+Pzzz8vdoZFpjJFRLRv3z6aNGkSe+21V7z22msZy/Pkk0/GdtttF//85z+jWbNmsfnmm8e5554bP//8c0b3zyr/+c9/olu3btGqVauM7aNOnTrFl19+Gc8++2wkSRLz5s2LRx55JP76179mJM+yZcsKfeZH/PJ5/dZbbxV7ON7vyVMSEyZMiK5du0bVqlULZZ4+fXr8+OOPa3zsuspUWuWZpyTfrcsrz6effhqjR49O/axe15nGjh0bo0aNKnbmfSbyRPxySpmGDRvGLrvsEk8++WTG8jz11FOx8cYbx9NPPx2tW7eOjTbaKE488cT44YcfMpbpt+6+++7YfPPNVzuLcF3n6dixY2RnZ8fQoUMjLy8vFixYEPfff39069Ztjb8zrqs8q/us/uqrr2LmzJlrfGxZZfrt50x5frcuSZ7SKq88Jf1e/VtKtNVY9aIMGDAgfvzxx1i+fHlcc8018dVXX8WcOXMiImKnnXaKmjVrxv/93//FTz/9FEuWLIlzzz038vLyCsb8ETJ9+umncdNNN8Upp5yS0Tz/93//FzVr1owNNtggZs2aFU888URG8iRJEn379o1TTz212EMBM7WPzjrrrHjooYdi3Lhxccopp8RVV10V559/fkbyfP755xHxy7kSLr744nj66aejfv36sdtuu5Xof/brYv/82n/+85/o0aNHNG/efK32T1lmysrKihdffDEmT54ctWvXjmrVqsX1118fo0ePjvr165d7nj322CPmzp0b1157bSxfvjx+/PHHuOCCCyIi1vh5lZ+fH2effXbsvPPOsdVWW0VExNy5c6Nq1apFzmXSqFGjgkNV586dW+iXxFX3r7pvTWMWLly42l/w12We0irPTP/6179i8eLFcdhhh2U0T/PmzSMnJye22267OOOMM+LEE0/MSJ5PPvkkLrjggnjggQeicuXKq81QnpmaNGkSt99+ezz66KPx6KOPRosWLWK33XaLSZMmZSTP559/Hq+++mp88MEH8dhjj8UNN9wQjzzySJx++ukZyfNrX3/9dTz33HNrfP+UR6add945hg8fHr17946qVatG48aNo27dumv8RX9d5unRo0fcfffdMXHixEiSJN555524++67Y8WKFfHdd9+VaZ6SKO3n57rMVBrlmWfkyJHx9ttvr/GPeeWRp3PnzlGtWrXYbLPNokuXLnHZZZetcfy6zPT9999H3759Y9iwYVGnTp0SPWZd5qlVq1Zcd911MWrUqHjmmWdil112iV69eq2xSFuXeT7//POYOXNmjBo1Ku67774YNmxYTJw4sdjT25RXpl9bunRpDB8+PE444YSM5WndunW88MILceGFF0ZOTk7Uq1cvvvrqqxg5cmRG8vTo0SP++9//xksvvRT5+fnx8ccfx3XXXRcR6+a79W+9/vrr8fDDD8fJJ59csKw8v1uXJE9plGeeknyvLo4SbTWqVKkS//3vf+Pjjz+OBg0aRI0aNWLcuHHRs2fPgpkcubm5MWrUqHjqqaeiVq1aUbdu3Zg/f35su+22hWZ7VORMs2fPjr333jsOPfTQIuf+KO885513XkyePDleeOGFqFSpUvTp0yeSJCn3PDfddFMsWrQoBgwYsFb7Y13vo/79+8duu+0W22yzTZx66qlx3XXXxU033VQwU6k886w6z9ZFF10UBx98cHTs2DGGDh0aWVlZMWrUqIzsn1W++uqreP7551P/J7+uMyVJEmeccUY0bNgw/ve//8Vbb70VvXr1iv3222+tSvayyrPlllvGvffeG9ddd13UqFEjGjduHK1bt45GjRqt8fPqjDPOiA8++CAeeuihUu3PslbR8kSUX6YRI0bEoEGDYuTIkUXOr1Xeef73v//FO++8E7fffnvccMMN8eCDD5Z7nry8vDjyyCNj0KBBsfnmm6/VY9flPmrTpk2ccsop0bFjx+jcuXPcc8890blz52IvwFAeefLz8yMrKyuGDx8eO+ywQ/z1r3+N66+/Pu69997VfqEur/f0vffeG/Xq1VvtSeHLK9O0adOiX79+cckll8TEiRNj9OjRMWPGjDj11FMzkucf//hH9OzZM3baaaeoUqVKHHDAAXHsscdGRKz283p9/mwsqfLKM27cuDjuuOPirrvuKvaCGeWZ5+GHH45JkybFiBEj4plnnol//etfaxy/LjOddNJJceSRR0bXrl1L/Jh1mWfDDTeM/v37x4477hjbb799XH311XH00Uev9sTw6zpPfn5+LFu2LO67777o0qVL7LbbbvGf//wnxo0bV+QE6+WV6dcee+yxWLRoUcFnUSbyzJ07N0466aQ49thj4+23346XX345qlatGocccshqf2dc1+/pM888M/bdd9+oWrVq7LTTTnH44YdHxOo/q8sq0wcffBAHHHBADBw4MLp3717q9azPeUr6vbo4Jf+z7XqoY8eOMWXKlFiwYEEsX748cnNzY8cddyw0O6l79+7x2WefxXfffReVK1eOevXqRePGjWPjjTeu8Jm+/vrr2H333aNz587Fnhy2vPNsuOGGseGGG8bmm28eW2yxRbRo0SLeeOON6NSpU7nmGTt2bEyYMKHQoXEREdttt10cddRRce+992ZsH/3ajjvuGCtXrowZM2YUOUH0us7TpEmTiIho27ZtwWNycnJi4403jlmzZpU4S1nl+bWhQ4fGBhtsEPvvv/9a5SjrTGPHjo2nn346fvzxx4K/uN56660xZsyYuPfeewtmgZVXnoiII488Mo488siYN29e1KxZM7KysuL6669f7fvszDPPjKeffjpeeeWVQrP6GjduHMuXL4/58+cX+ovQvHnzonHjxgVj3nrrrULrW3UFnV+P+e2VkObNmxd16tQpONS0PPOURnlleuihh+LEE0+MUaNGrfEk2uWVp3Xr1hERsfXWW8e8efPi0ksvjSOOOKJc8yxatCjeeeedmDx5cpx55pkR8csvIUmSROXKleOFF16IPfbYI2P76Nd22GGH1R42va7zNGnSJJo1axZ169YtGLPFFltEkiTx1VdfxWabbZaR/ZMkSdxzzz1xzDHHFDpMMBP7aPDgwbHzzjvHeeedFxER22yzTdSsWTO6dOkSV1xxRcH/88orT/Xq1eOee+6JO+64I+bNmxdNmjSJO++8s+BqdGW5f0pidZ/Vv85c3pnWVnnlefnll2O//faLIUOGRJ8+fTKep0WLFhHxy/e1vLy8OPnkk+Pvf/97VKpUqdwzjR07Np588smCIi9JksjPz4/KlSvHnXfeGccff3y55inOjjvuGGPGjCn2vnWdp0mTJlG5cuVCfxTaYostIuKXK/oW912/PPfR3XffHfvuu2+RWU7lmeeWW26JunXrFro68AMPPBAtWrSIN998M3baaadyzZOVlRXXXHNNXHXVVTF37tzIzc2Nl156KSJinXy3XmXatGmx5557xsknnxwXX3xxofvK87t1SfKsrfLKU9Lv1au1VmdQ+xOL35zMuzgff/xxkp2dnTz//POrHfPSSy8lWVlZxZ4U8vdeWKAsM3311VfJZpttlhx++OHJypUrM57nt2bOnJlERDJu3LhyzzNz5szk/fffL7g9//zzSUQkjzzySPLll1+ucXvluY8eeOCBJDs7O/nhhx/KPc+CBQuSnJycQhcWWL58edKwYcPkjjvuKPc8q+Tn5yetW7dO/v73v69xG+WR6cknn0yys7OTRYsWFRq3+eabJ1deeWW55ynOf/7zn6RGjRpFToCen5+fnHHGGUnTpk2Tjz/+uMjjVp3c85FHHilY9tFHHxV78ux58+YVjLnjjjuSOnXqJEuXLk2S5JeTn2611VaF1n3EEUcUOflpeeX5tbSTn5ZnphEjRiTVqlVLHn/88QqR57cGDRqUtGrVqtzz5OXlFfqsfv/995PTTjstadOmTfL+++8nixcvrjD7qFu3bsmBBx6YkTx33HFHUr169UKfRY8//niSnZ2d/PTTTxnbP6suwPD++++vdr+VV6aDDjooOeywwwqt+/XXX08iIpk9e3bG9tGvde3aNTniiCPKfP/8WtqFBX594u4BAwYUe2GB8sr0a2u6sEB55hk3blxSs2bN5Oabb15t1kzsn1XuvffepHLlykVOwF5emaZNm1bo8/qKK65Iateunbz//vuFvstmch+deOKJSYcOHQotK688q37f+PTTTwuWrTqR//Tp0zOSaZXPP/88ycrKSp566qli7y+vPP3790922GGHQsu+/vrrJCKS1157rdzzFOeYY45JOnXqVGR5WWX64IMPkoYNGybnnXdesdsvz+/WJcnza2v6bl2eeUryvTrNel2iLVq0KJk8eXIyefLkJCKS66+/Ppk8eXIyc+bMJEmSZOTIkcm4ceOSzz77LHn88ceTVq1aJQcddFChddxzzz3JhAkTkk8//TS5//77kwYNGiT9+/cvNGbmzJnJ5MmTk0GDBiW1atUq2OZvf7kur0xfffVVsummmyZ77rln8tVXXyVz5swpuGUizxtvvJHcdNNNyeTJk5MZM2YkL730UtK5c+dkk002KfKFsrxes19Lu3pPeWR6/fXXkyFDhiRTpkxJPvvss+SBBx5IcnNzkz59+mQkT5IkSb9+/ZJmzZolzz//fPLRRx8lJ5xwQtKwYcMipV55vmYvvvhiEhHJhx9+WOxrVZ6Zvv3222SDDTZIDjrooGTKlCnJ9OnTk3PPPTepUqVKMmXKlIzso5tuuimZOHFiMn369OTmm29Oqlevntx4441F9s9pp52W1K1bNxk/fnyhz4df/8J96qmnJi1btkzGjh2bvPPOO0mnTp0KfWlYuXJlstVWWyXdu3dPpkyZkowePTrJzc1NBgwYUDDm888/T2rUqJGcd955yYcffpjccsstSaVKlZLRo0dnJE+SJAWvQ8eOHZMjjzwymTx5cjJ16tSM7aPhw4cnlStXTm655ZZC25k/f35G8tx8883Jk08+mXz88cfJxx9/nNx9991J7dq1k4suuihjr9mvremLbnllGjJkSPL4448nn3zySfL+++8n/fr1S7Kzs5MXX3wxI3kWLVqUNG/ePDnkkEOSqVOnJi+//HKy2WabJSeeeGJGX7Ojjz462XHHHYt9rco709ChQ5PKlSsnt956a/LZZ58lr776arLddtsV+WWtvPJMnz49uf/++5OPP/44efPNN5PevXsnDRo0SL744osyz5MkSfLJJ58kkydPTk455ZRk8803L/gcXHU1zvnz5yeNGjVKjjnmmOSDDz5IHnrooaRGjRrF/tGsvDIlSZJMnTo1mTx5crLffvslu+22W8GYTOQZO3ZsUqNGjWTAgAGFtvPbq+KWV54HHnggefjhh5Np06Yln332WfLwww8nTZs2TY466qiMvma/trrJBeWVZ9iwYcmIESOSDz/8MPnwww+TK6+8MsnOzk7uueeejOTJy8tLtt1226Rr167JpEmTknfeeSfZcccdk7322ivjr9nFF1+cNG3adLUTL8orz6o/EA8aNCj5+OOPk4kTJyY9evRIWrVqVWhb5ZXn22+/TW677bbkww8/TCZPnpycddZZSbVq1ZI333xzneyj999/P8nNzU2OPvroQuv45ptvCsaU53frkuRJkpJ9ty6vPCX9Xp1mvS7RVv0V9Le3Y489NkmSJLnxxhuT5s2bJ1WqVElatmyZXHzxxUU+VP7v//4vadSoUVKlSpVks802S6677roil7Q99thji91OcbOsyiPT0KFDi91GcRMTyyPPe++9l+y+++5JgwYNkpycnGSjjTZKTj311OSrr77K2Gv2a2klWnlkmjhxYrLjjjsmdevWTapVq5ZsscUWyVVXXVXsX63Lax8tX748+fvf/540bNgwqV27dtKtW7fkgw8+yFieJPnlLy2dO3cu9nXKRKa333476d69e9KgQYOkdu3ayU477ZQ8++yzGctzzDHHJA0aNEiqVq2abLPNNsl9991X7P5Z3efD0KFDC8b8/PPPyemnn57Ur18/qVGjRnLggQcWKeJnzJiR9OzZM6levXqy4YYbJn//+9+TFStWFHnu7du3T6pWrZpsvPHGhbaRiTzFbee3s6zKM9Ouu+66xvdGeef597//nWy55ZZJjRo1kjp16iQdOnRIbr311kKXmy/v1+zX1lSilVema665Jtlkk02SatWqJQ0aNEh22223ZOzYsRnLkyS/XAa+W7duSfXq1ZPmzZsn/fv3L/TFtLzzzJ8/P6levXpy5513Fn2hMpTp3//+d9K2bdukevXqSZMmTZKjjjqqyPeQ8sozbdq0pH379kn16tWTOnXqJAcccECxs4rLKs/qPmd+Xdq9++67yS677JLk5OQkzZo1S66++up1+pqVJFOrVq2KHZOJPKv7rr/rrrtmJM9DDz2UbLvttkmtWrWSmjVrJm3btk2uuuqq5Oeff87oa/ZrqyvRyivPsGHDki222KLg/2c77LBDMmrUqIzun9mzZycHHXRQUqtWraRRo0ZJ3759ixSx5Z0pLy8vad68eXLhhRcWyZGJPA8++GDSoUOHpGbNmklubm6y//77F/njeXnl+fbbb5OddtopqVmzZlKjRo1kzz33TN544411to8GDhxY7Dp++z21vL5blzRPacesizwl/V6dJuv/Dw0AAAAArIarcwIAAABACiUaAAAAAKRQogEAAABACiUaAAAAAKRQogEAAABACiUaAAAAAKRQogEAAABACiUaAAAAAKRQogEAAABACiUaAAAAAKRQogEAsNby8vIiPz8/0zEAAMqNEg0A4A/uvvvuiw022CCWLVtWaHmvXr3imGOOiYiIJ554IrbddtuoVq1abLzxxjFo0KBYuXJlwdjrr78+tt5666hZs2a0aNEiTj/99Fi8eHHB/cOGDYt69erFk08+GW3bto2cnJyYNWtW+TxBAIAKQIkGAPAHd+ihh0ZeXl48+eSTBcu++eabeOaZZ+L444+P//3vf9GnT5/o169fTJs2Le64444YNmxYXHnllQXjs7Oz49///ndMnTo17r333hg7dmycf/75hbbz008/xTXXXBN33313TJ06NRo2bFhuzxEAINOykiRJMh0CAIDf5/TTT48ZM2bEs88+GxG/zCy75ZZb4tNPP4299tor9txzzxgwYEDB+AceeCDOP//8+Prrr4td3yOPPBKnnnpqfPfddxHxy0y04447LqZMmRLt2rVb908IAKCCUaIBAPwJTJ48ObbffvuYOXNmNGvWLLbZZps49NBD4x//+Efk5ubG4sWLo1KlSgXj8/LyYunSpbFkyZKoUaNGvPjiizF48OD46KOPYuHChbFy5cpC9w8bNixOOeWUWLp0aWRlZWXwmQIAZEblTAcAAOD369ChQ7Rr1y7uu+++6N69e0ydOjWeeeaZiIhYvHhxDBo0KA466KAij6tWrVrMmDEj9t133zjttNPiyiuvjAYNGsSrr74aJ5xwQixfvjxq1KgRERHVq1dXoAEA6y0lGgDAn8SJJ54YN9xwQ8yePTu6desWLVq0iIiIbbfdNqZPnx6bbrppsY+bOHFi5Ofnx3XXXRfZ2b+cMnfkyJHllhsA4I9AiQYA8Cdx5JFHxrnnnht33XVX3HfffQXLL7nkkth3332jZcuWccghh0R2dna8++678cEHH8QVV1wRm266aaxYsSJuuumm2G+//eK1116L22+/PYPPBACg4nF1TgCAP4m6devGwQcfHLVq1YpevXoVLO/Ro0c8/fTT8cILL8T2228fO+20UwwZMiRatWoVERHt2rWL66+/Pq655prYaqutYvjw4TF48OAMPQsAgIrJhQUAAP5E9txzz9hyyy3j3//+d6ajAAD8qSjRAAD+BH788ccYP358HHLIITFt2rRo06ZNpiMBAPypOCcaAMCfQIcOHeLHH3+Ma665RoEGALAOmIkGAAAAAClcWAAAAAAAUijRAAAAACCFEg0AAAAAUijRAAAAACCFEg0AAAAAUijRAAAAACCFEg0AAAAAUijRAAAAACDF/weJjO1aGFLgEQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(merged_df.corr(), annot = True )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 603
        },
        "id": "Qi0ezNtQ2fnZ",
        "outputId": "f53a4ca9-1333-4002-acfb-61991702189a"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-58-b7e8d3571295>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  sns.heatmap(merged_df.corr(), annot = True )\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 58,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target = merged_df.rem_rec_value"
      ],
      "metadata": {
        "id": "BEwt_S-a6Pur"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = merged_df[['country name','year','gdp_value','pop_value','unemp_value','fdi_value']]\n"
      ],
      "metadata": {
        "id": "ew4MvePx5kxQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X335OfHKgU1J",
        "outputId": "e0eac1dd-3923-4a42-9bc7-7fb39b09f712"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "country name    0\n",
              "year            0\n",
              "gdp_value       0\n",
              "pop_value       0\n",
              "unemp_value     0\n",
              "fdi_value       0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 61,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OneHotEncoder"
      ],
      "metadata": {
        "id": "t56IMXPw9cog"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "encoder = OneHotEncoder()"
      ],
      "metadata": {
        "id": "h4E3A1Wx9uTu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming merged_df is your DataFrame containing the merged data\n",
        "\n",
        "# Apply one-hot encoding to 'country name' column\n",
        "one_hot_encoded_df = pd.get_dummies(x, columns=['country name'], prefix='country')\n",
        "\n",
        "\n",
        "\n",
        "# Display the DataFrame with one-hot encoding\n",
        "one_hot_encoded_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "BamvGxfL-GPK",
        "outputId": "8607f562-69ee-45f6-b0e5-32af6cca1113"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-7dd6623a-ecb5-436f-aa9a-5a521a66252b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>gdp_value</th>\n",
              "      <th>pop_value</th>\n",
              "      <th>unemp_value</th>\n",
              "      <th>fdi_value</th>\n",
              "      <th>country_Algeria</th>\n",
              "      <th>country_Angola</th>\n",
              "      <th>country_Benin</th>\n",
              "      <th>country_Botswana</th>\n",
              "      <th>country_Burkina Faso</th>\n",
              "      <th>...</th>\n",
              "      <th>country_Somalia</th>\n",
              "      <th>country_South Africa</th>\n",
              "      <th>country_South Sudan</th>\n",
              "      <th>country_Sudan</th>\n",
              "      <th>country_Tanzania</th>\n",
              "      <th>country_Togo</th>\n",
              "      <th>country_Tunisia</th>\n",
              "      <th>country_Uganda</th>\n",
              "      <th>country_Zambia</th>\n",
              "      <th>country_Zimbabwe</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1643</th>\n",
              "      <td>1991</td>\n",
              "      <td>7.000000e+02</td>\n",
              "      <td>12228691.0</td>\n",
              "      <td>4.489</td>\n",
              "      <td>6.645000e+08</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1644</th>\n",
              "      <td>1991</td>\n",
              "      <td>2.118980e+11</td>\n",
              "      <td>5594828.0</td>\n",
              "      <td>2.616</td>\n",
              "      <td>8.925001e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1645</th>\n",
              "      <td>1991</td>\n",
              "      <td>5.603878e+11</td>\n",
              "      <td>5293046.0</td>\n",
              "      <td>1.484</td>\n",
              "      <td>3.938223e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1646</th>\n",
              "      <td>1991</td>\n",
              "      <td>8.844180e+11</td>\n",
              "      <td>9365064.0</td>\n",
              "      <td>2.553</td>\n",
              "      <td>5.700000e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1647</th>\n",
              "      <td>1991</td>\n",
              "      <td>7.970750e+09</td>\n",
              "      <td>1380584.0</td>\n",
              "      <td>13.820</td>\n",
              "      <td>-8.211494e+06</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3334</th>\n",
              "      <td>2022</td>\n",
              "      <td>1.743661e+14</td>\n",
              "      <td>65497748.0</td>\n",
              "      <td>2.762</td>\n",
              "      <td>1.111461e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3335</th>\n",
              "      <td>2022</td>\n",
              "      <td>1.627210e+14</td>\n",
              "      <td>47249585.0</td>\n",
              "      <td>4.280</td>\n",
              "      <td>1.526189e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3336</th>\n",
              "      <td>2022</td>\n",
              "      <td>6.638346e+12</td>\n",
              "      <td>59893885.0</td>\n",
              "      <td>29.806</td>\n",
              "      <td>9.194808e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3337</th>\n",
              "      <td>2022</td>\n",
              "      <td>5.044770e+11</td>\n",
              "      <td>20017675.0</td>\n",
              "      <td>6.131</td>\n",
              "      <td>1.080941e+07</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3338</th>\n",
              "      <td>2022</td>\n",
              "      <td>9.360628e+12</td>\n",
              "      <td>16320537.0</td>\n",
              "      <td>7.945</td>\n",
              "      <td>3.415000e+08</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1664 rows × 56 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dd6623a-ecb5-436f-aa9a-5a521a66252b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7dd6623a-ecb5-436f-aa9a-5a521a66252b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7dd6623a-ecb5-436f-aa9a-5a521a66252b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7561f90f-704c-4e93-b004-3618fa4f52a5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7561f90f-704c-4e93-b004-3618fa4f52a5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7561f90f-704c-4e93-b004-3618fa4f52a5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0b2a0dfd-e8ee-471f-aa9c-0e6e40e123c4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('one_hot_encoded_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0b2a0dfd-e8ee-471f-aa9c-0e6e40e123c4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('one_hot_encoded_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      year     gdp_value   pop_value  unemp_value     fdi_value  \\\n",
              "1643  1991  7.000000e+02  12228691.0        4.489  6.645000e+08   \n",
              "1644  1991  2.118980e+11   5594828.0        2.616  8.925001e+05   \n",
              "1645  1991  5.603878e+11   5293046.0        1.484  3.938223e+05   \n",
              "1646  1991  8.844180e+11   9365064.0        2.553  5.700000e+05   \n",
              "1647  1991  7.970750e+09   1380584.0       13.820 -8.211494e+06   \n",
              "...    ...           ...         ...          ...           ...   \n",
              "3334  2022  1.743661e+14  65497748.0        2.762  1.111461e+09   \n",
              "3335  2022  1.627210e+14  47249585.0        4.280  1.526189e+09   \n",
              "3336  2022  6.638346e+12  59893885.0       29.806  9.194808e+09   \n",
              "3337  2022  5.044770e+11  20017675.0        6.131  1.080941e+07   \n",
              "3338  2022  9.360628e+12  16320537.0        7.945  3.415000e+08   \n",
              "\n",
              "      country_Algeria  country_Angola  country_Benin  country_Botswana  \\\n",
              "1643                0               1              0                 0   \n",
              "1644                0               0              0                 0   \n",
              "1645                0               0              1                 0   \n",
              "1646                0               0              0                 0   \n",
              "1647                0               0              0                 1   \n",
              "...               ...             ...            ...               ...   \n",
              "3334                0               0              0                 0   \n",
              "3335                0               0              0                 0   \n",
              "3336                0               0              0                 0   \n",
              "3337                0               0              0                 0   \n",
              "3338                0               0              0                 0   \n",
              "\n",
              "      country_Burkina Faso  ...  country_Somalia  country_South Africa  \\\n",
              "1643                     0  ...                0                     0   \n",
              "1644                     0  ...                0                     0   \n",
              "1645                     0  ...                0                     0   \n",
              "1646                     1  ...                0                     0   \n",
              "1647                     0  ...                0                     0   \n",
              "...                    ...  ...              ...                   ...   \n",
              "3334                     0  ...                0                     0   \n",
              "3335                     0  ...                0                     0   \n",
              "3336                     0  ...                0                     1   \n",
              "3337                     0  ...                0                     0   \n",
              "3338                     0  ...                0                     0   \n",
              "\n",
              "      country_South Sudan  country_Sudan  country_Tanzania  country_Togo  \\\n",
              "1643                    0              0                 0             0   \n",
              "1644                    0              0                 0             0   \n",
              "1645                    0              0                 0             0   \n",
              "1646                    0              0                 0             0   \n",
              "1647                    0              0                 0             0   \n",
              "...                   ...            ...               ...           ...   \n",
              "3334                    0              0                 1             0   \n",
              "3335                    0              0                 0             0   \n",
              "3336                    0              0                 0             0   \n",
              "3337                    0              0                 0             0   \n",
              "3338                    0              0                 0             0   \n",
              "\n",
              "      country_Tunisia  country_Uganda  country_Zambia  country_Zimbabwe  \n",
              "1643                0               0               0                 0  \n",
              "1644                0               0               0                 0  \n",
              "1645                0               0               0                 0  \n",
              "1646                0               0               0                 0  \n",
              "1647                0               0               0                 0  \n",
              "...               ...             ...             ...               ...  \n",
              "3334                0               0               0                 0  \n",
              "3335                0               1               0                 0  \n",
              "3336                0               0               0                 0  \n",
              "3337                0               0               1                 0  \n",
              "3338                0               0               0                 1  \n",
              "\n",
              "[1664 rows x 56 columns]"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_hot_encoded_df = pd.get_dummies(one_hot_encoded_df, columns=['year'], prefix='year')\n",
        "\n",
        "one_hot_encoded_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "WM9WU1TQ-49I",
        "outputId": "df64f6d8-590a-4201-dbc7-547069e959e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-38bb852b-1dba-497d-97c0-4f6eb6daac8d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gdp_value</th>\n",
              "      <th>pop_value</th>\n",
              "      <th>unemp_value</th>\n",
              "      <th>fdi_value</th>\n",
              "      <th>country_Algeria</th>\n",
              "      <th>country_Angola</th>\n",
              "      <th>country_Benin</th>\n",
              "      <th>country_Botswana</th>\n",
              "      <th>country_Burkina Faso</th>\n",
              "      <th>country_Burundi</th>\n",
              "      <th>...</th>\n",
              "      <th>year_2013</th>\n",
              "      <th>year_2014</th>\n",
              "      <th>year_2015</th>\n",
              "      <th>year_2016</th>\n",
              "      <th>year_2017</th>\n",
              "      <th>year_2018</th>\n",
              "      <th>year_2019</th>\n",
              "      <th>year_2020</th>\n",
              "      <th>year_2021</th>\n",
              "      <th>year_2022</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1643</th>\n",
              "      <td>7.000000e+02</td>\n",
              "      <td>12228691.0</td>\n",
              "      <td>4.489</td>\n",
              "      <td>6.645000e+08</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1644</th>\n",
              "      <td>2.118980e+11</td>\n",
              "      <td>5594828.0</td>\n",
              "      <td>2.616</td>\n",
              "      <td>8.925001e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1645</th>\n",
              "      <td>5.603878e+11</td>\n",
              "      <td>5293046.0</td>\n",
              "      <td>1.484</td>\n",
              "      <td>3.938223e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1646</th>\n",
              "      <td>8.844180e+11</td>\n",
              "      <td>9365064.0</td>\n",
              "      <td>2.553</td>\n",
              "      <td>5.700000e+05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1647</th>\n",
              "      <td>7.970750e+09</td>\n",
              "      <td>1380584.0</td>\n",
              "      <td>13.820</td>\n",
              "      <td>-8.211494e+06</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3334</th>\n",
              "      <td>1.743661e+14</td>\n",
              "      <td>65497748.0</td>\n",
              "      <td>2.762</td>\n",
              "      <td>1.111461e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3335</th>\n",
              "      <td>1.627210e+14</td>\n",
              "      <td>47249585.0</td>\n",
              "      <td>4.280</td>\n",
              "      <td>1.526189e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3336</th>\n",
              "      <td>6.638346e+12</td>\n",
              "      <td>59893885.0</td>\n",
              "      <td>29.806</td>\n",
              "      <td>9.194808e+09</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3337</th>\n",
              "      <td>5.044770e+11</td>\n",
              "      <td>20017675.0</td>\n",
              "      <td>6.131</td>\n",
              "      <td>1.080941e+07</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3338</th>\n",
              "      <td>9.360628e+12</td>\n",
              "      <td>16320537.0</td>\n",
              "      <td>7.945</td>\n",
              "      <td>3.415000e+08</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1664 rows × 87 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38bb852b-1dba-497d-97c0-4f6eb6daac8d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38bb852b-1dba-497d-97c0-4f6eb6daac8d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38bb852b-1dba-497d-97c0-4f6eb6daac8d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-605d834c-6328-40bb-81d7-81191583cf5a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-605d834c-6328-40bb-81d7-81191583cf5a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-605d834c-6328-40bb-81d7-81191583cf5a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5ac93e7c-b106-4c30-841c-8b88d8f8fa32\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('one_hot_encoded_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5ac93e7c-b106-4c30-841c-8b88d8f8fa32 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('one_hot_encoded_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "         gdp_value   pop_value  unemp_value     fdi_value  country_Algeria  \\\n",
              "1643  7.000000e+02  12228691.0        4.489  6.645000e+08                0   \n",
              "1644  2.118980e+11   5594828.0        2.616  8.925001e+05                0   \n",
              "1645  5.603878e+11   5293046.0        1.484  3.938223e+05                0   \n",
              "1646  8.844180e+11   9365064.0        2.553  5.700000e+05                0   \n",
              "1647  7.970750e+09   1380584.0       13.820 -8.211494e+06                0   \n",
              "...            ...         ...          ...           ...              ...   \n",
              "3334  1.743661e+14  65497748.0        2.762  1.111461e+09                0   \n",
              "3335  1.627210e+14  47249585.0        4.280  1.526189e+09                0   \n",
              "3336  6.638346e+12  59893885.0       29.806  9.194808e+09                0   \n",
              "3337  5.044770e+11  20017675.0        6.131  1.080941e+07                0   \n",
              "3338  9.360628e+12  16320537.0        7.945  3.415000e+08                0   \n",
              "\n",
              "      country_Angola  country_Benin  country_Botswana  country_Burkina Faso  \\\n",
              "1643               1              0                 0                     0   \n",
              "1644               0              0                 0                     0   \n",
              "1645               0              1                 0                     0   \n",
              "1646               0              0                 0                     1   \n",
              "1647               0              0                 1                     0   \n",
              "...              ...            ...               ...                   ...   \n",
              "3334               0              0                 0                     0   \n",
              "3335               0              0                 0                     0   \n",
              "3336               0              0                 0                     0   \n",
              "3337               0              0                 0                     0   \n",
              "3338               0              0                 0                     0   \n",
              "\n",
              "      country_Burundi  ...  year_2013  year_2014  year_2015  year_2016  \\\n",
              "1643                0  ...          0          0          0          0   \n",
              "1644                1  ...          0          0          0          0   \n",
              "1645                0  ...          0          0          0          0   \n",
              "1646                0  ...          0          0          0          0   \n",
              "1647                0  ...          0          0          0          0   \n",
              "...               ...  ...        ...        ...        ...        ...   \n",
              "3334                0  ...          0          0          0          0   \n",
              "3335                0  ...          0          0          0          0   \n",
              "3336                0  ...          0          0          0          0   \n",
              "3337                0  ...          0          0          0          0   \n",
              "3338                0  ...          0          0          0          0   \n",
              "\n",
              "      year_2017  year_2018  year_2019  year_2020  year_2021  year_2022  \n",
              "1643          0          0          0          0          0          0  \n",
              "1644          0          0          0          0          0          0  \n",
              "1645          0          0          0          0          0          0  \n",
              "1646          0          0          0          0          0          0  \n",
              "1647          0          0          0          0          0          0  \n",
              "...         ...        ...        ...        ...        ...        ...  \n",
              "3334          0          0          0          0          0          1  \n",
              "3335          0          0          0          0          0          1  \n",
              "3336          0          0          0          0          0          1  \n",
              "3337          0          0          0          0          0          1  \n",
              "3338          0          0          0          0          0          1  \n",
              "\n",
              "[1664 rows x 87 columns]"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "\n",
        "numerical_columns = ['gdp_value','pop_value','unemp_value','fdi_value']\n",
        "\n",
        "# Initialize the MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Scale the numerical columns\n",
        "one_hot_encoded_df[numerical_columns] = scaler.fit_transform(one_hot_encoded_df[numerical_columns])\n",
        "# Display the DataFrame with scaled numerical columns\n",
        "one_hot_encoded_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "g4ee6Fl39z1U",
        "outputId": "d2d94437-e346-43f8-cf9d-f9f4e65142ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-9d77b9aa-dd7d-44ed-a9cc-5559f0802de4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gdp_value</th>\n",
              "      <th>pop_value</th>\n",
              "      <th>unemp_value</th>\n",
              "      <th>fdi_value</th>\n",
              "      <th>country_Algeria</th>\n",
              "      <th>country_Angola</th>\n",
              "      <th>country_Benin</th>\n",
              "      <th>country_Botswana</th>\n",
              "      <th>country_Burkina Faso</th>\n",
              "      <th>country_Burundi</th>\n",
              "      <th>...</th>\n",
              "      <th>year_2013</th>\n",
              "      <th>year_2014</th>\n",
              "      <th>year_2015</th>\n",
              "      <th>year_2016</th>\n",
              "      <th>year_2017</th>\n",
              "      <th>year_2018</th>\n",
              "      <th>year_2019</th>\n",
              "      <th>year_2020</th>\n",
              "      <th>year_2021</th>\n",
              "      <th>year_2022</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1643</th>\n",
              "      <td>9.172465e-13</td>\n",
              "      <td>0.055424</td>\n",
              "      <td>0.132265</td>\n",
              "      <td>0.167758</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1644</th>\n",
              "      <td>9.718135e-04</td>\n",
              "      <td>0.025052</td>\n",
              "      <td>0.072843</td>\n",
              "      <td>0.153949</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1645</th>\n",
              "      <td>2.570069e-03</td>\n",
              "      <td>0.023670</td>\n",
              "      <td>0.036929</td>\n",
              "      <td>0.153939</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1646</th>\n",
              "      <td>4.056147e-03</td>\n",
              "      <td>0.042313</td>\n",
              "      <td>0.070844</td>\n",
              "      <td>0.153942</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1647</th>\n",
              "      <td>3.655571e-05</td>\n",
              "      <td>0.005757</td>\n",
              "      <td>0.428299</td>\n",
              "      <td>0.153760</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3334</th>\n",
              "      <td>7.996833e-01</td>\n",
              "      <td>0.299310</td>\n",
              "      <td>0.077475</td>\n",
              "      <td>0.177059</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3335</th>\n",
              "      <td>7.462764e-01</td>\n",
              "      <td>0.215763</td>\n",
              "      <td>0.125635</td>\n",
              "      <td>0.185689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3336</th>\n",
              "      <td>3.044500e-02</td>\n",
              "      <td>0.273653</td>\n",
              "      <td>0.935470</td>\n",
              "      <td>0.345265</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3337</th>\n",
              "      <td>2.313649e-03</td>\n",
              "      <td>0.091085</td>\n",
              "      <td>0.184359</td>\n",
              "      <td>0.154155</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3338</th>\n",
              "      <td>4.293002e-02</td>\n",
              "      <td>0.074158</td>\n",
              "      <td>0.241910</td>\n",
              "      <td>0.161037</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1664 rows × 87 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d77b9aa-dd7d-44ed-a9cc-5559f0802de4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d77b9aa-dd7d-44ed-a9cc-5559f0802de4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d77b9aa-dd7d-44ed-a9cc-5559f0802de4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3566e5d6-e70e-4720-8079-d6429a4df176\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3566e5d6-e70e-4720-8079-d6429a4df176')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3566e5d6-e70e-4720-8079-d6429a4df176 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a706db10-dc4a-4da2-80ab-8d588dfb25c0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('one_hot_encoded_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a706db10-dc4a-4da2-80ab-8d588dfb25c0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('one_hot_encoded_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "         gdp_value  pop_value  unemp_value  fdi_value  country_Algeria  \\\n",
              "1643  9.172465e-13   0.055424     0.132265   0.167758                0   \n",
              "1644  9.718135e-04   0.025052     0.072843   0.153949                0   \n",
              "1645  2.570069e-03   0.023670     0.036929   0.153939                0   \n",
              "1646  4.056147e-03   0.042313     0.070844   0.153942                0   \n",
              "1647  3.655571e-05   0.005757     0.428299   0.153760                0   \n",
              "...            ...        ...          ...        ...              ...   \n",
              "3334  7.996833e-01   0.299310     0.077475   0.177059                0   \n",
              "3335  7.462764e-01   0.215763     0.125635   0.185689                0   \n",
              "3336  3.044500e-02   0.273653     0.935470   0.345265                0   \n",
              "3337  2.313649e-03   0.091085     0.184359   0.154155                0   \n",
              "3338  4.293002e-02   0.074158     0.241910   0.161037                0   \n",
              "\n",
              "      country_Angola  country_Benin  country_Botswana  country_Burkina Faso  \\\n",
              "1643               1              0                 0                     0   \n",
              "1644               0              0                 0                     0   \n",
              "1645               0              1                 0                     0   \n",
              "1646               0              0                 0                     1   \n",
              "1647               0              0                 1                     0   \n",
              "...              ...            ...               ...                   ...   \n",
              "3334               0              0                 0                     0   \n",
              "3335               0              0                 0                     0   \n",
              "3336               0              0                 0                     0   \n",
              "3337               0              0                 0                     0   \n",
              "3338               0              0                 0                     0   \n",
              "\n",
              "      country_Burundi  ...  year_2013  year_2014  year_2015  year_2016  \\\n",
              "1643                0  ...          0          0          0          0   \n",
              "1644                1  ...          0          0          0          0   \n",
              "1645                0  ...          0          0          0          0   \n",
              "1646                0  ...          0          0          0          0   \n",
              "1647                0  ...          0          0          0          0   \n",
              "...               ...  ...        ...        ...        ...        ...   \n",
              "3334                0  ...          0          0          0          0   \n",
              "3335                0  ...          0          0          0          0   \n",
              "3336                0  ...          0          0          0          0   \n",
              "3337                0  ...          0          0          0          0   \n",
              "3338                0  ...          0          0          0          0   \n",
              "\n",
              "      year_2017  year_2018  year_2019  year_2020  year_2021  year_2022  \n",
              "1643          0          0          0          0          0          0  \n",
              "1644          0          0          0          0          0          0  \n",
              "1645          0          0          0          0          0          0  \n",
              "1646          0          0          0          0          0          0  \n",
              "1647          0          0          0          0          0          0  \n",
              "...         ...        ...        ...        ...        ...        ...  \n",
              "3334          0          0          0          0          0          1  \n",
              "3335          0          0          0          0          0          1  \n",
              "3336          0          0          0          0          0          1  \n",
              "3337          0          0          0          0          0          1  \n",
              "3338          0          0          0          0          0          1  \n",
              "\n",
              "[1664 rows x 87 columns]"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "# Split the data into a training set and a testing set\n",
        "X_train, X_test, y_train, y_test = train_test_split(one_hot_encoded_df, target, test_size=0.2, random_state=42)\n",
        "\n",
        "# Display the shapes of the resulting sets\n",
        "print(\"X_train shape:\", X_train.shape)\n",
        "print(\"X_test shape:\", X_test.shape)\n",
        "print(\"y_train shape:\", y_train.shape)\n",
        "print(\"y_test shape:\", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oc7U75hP_iWd",
        "outputId": "88d55496-79e9-4e70-e01e-84bfada81edb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (1331, 87)\n",
            "X_test shape: (333, 87)\n",
            "y_train shape: (1331,)\n",
            "y_test shape: (333,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "def remove_special_characters(features):\n",
        "    cleaned_features = []\n",
        "    for feature in features:\n",
        "        # Remove special characters using regex\n",
        "        cleaned_feature = re.sub(r'[^a-zA-Z0-9_]', '', feature)\n",
        "        cleaned_features.append(cleaned_feature)\n",
        "    return cleaned_features\n",
        "\n",
        "# Example usage\n",
        "original_features = X_train.columns.to_list()\n",
        "cleaned_features = remove_special_characters(original_features)\n",
        "\n",
        "X_train.columns = cleaned_features\n",
        "X_test.columns = cleaned_features\n"
      ],
      "metadata": {
        "id": "UtQKPC8nlvjS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# Assuming X_train, X_test, y_train, and y_test are already defined\n",
        "\n",
        "# Initialize the linear regression model\n",
        "model = LinearRegression()\n",
        "\n",
        "# Fit the model to the training data\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "# Evaluate the performance\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Display the evaluation metrics\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
        "print(\"R-squared (R2):\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n9zX7h6zFN7v",
        "outputId": "07f40613-7abd-4173-f009-4e7976e11fb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error (MSE): 1.3336262976447724e+18\n",
            "Root Mean Squared Error (RMSE): 1154827388.679699\n",
            "R-squared (R2): 0.23430405112133956\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import make_scorer, mean_squared_error\n",
        "from sklearn.model_selection import KFold\n",
        "\n",
        "# Assuming X_train, X_test, y_train, and y_test are already defined\n",
        "\n",
        "# Initialize the linear regression model\n",
        "model = LinearRegression()\n",
        "\n",
        "# Define the parameter grid\n",
        "param_grid = {\n",
        "   'fit_intercept': [True, False],\n",
        "    'copy_X': [True, False],\n",
        "    'n_jobs': [None, 1, 2, 4,-1],  # Adjust the values based on your system capabilities\n",
        "    'positive': [False, True]}\n",
        "\n",
        "# Define a custom scoring function (using negative mean squared error for GridSearchCV)\n",
        "scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "\n",
        "# Initialize GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, scoring=scorer, cv=KFold(n_splits=5, shuffle=True, random_state=42))\n",
        "\n",
        "# Fit the model to the training data and perform grid search\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Get the best hyperparameters\n",
        "best_params = grid_search.best_params_\n",
        "\n",
        "# Make predictions on the test set using the best model\n",
        "best_model = grid_search.best_estimator_\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the best model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Display the best hyperparameters and evaluation metrics\n",
        "print(\"Best Hyperparameters:\", best_params)\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
        "print(\"R-squared (R2):\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgHO68HwGGb4",
        "outputId": "e05430ca-cc2a-42d7-f4b0-591ca24aa7b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Hyperparameters: {'copy_X': True, 'fit_intercept': True, 'n_jobs': None, 'positive': False}\n",
            "Mean Squared Error (MSE): 1.3336262976447724e+18\n",
            "Root Mean Squared Error (RMSE): 1154827388.679699\n",
            "R-squared (R2): 0.23430405112133956\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import make_scorer, mean_squared_error, r2_score\n",
        "from sklearn.model_selection import KFold\n",
        "import numpy as np\n",
        "\n",
        "# Assuming X_train, X_test, y_train, and y_test are already defined\n",
        "\n",
        "# Initialize the Random Forest model\n",
        "model = RandomForestRegressor()\n",
        "\n",
        "# Define the parameter grid\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [None, 10, 20],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'max_features': ['auto', 'sqrt', 'log2'],\n",
        "    'n_jobs': [None, 1, 2, 4, -1]  # Adjust the values based on your system capabilities\n",
        "}\n",
        "\n",
        "# Define a custom scoring function (using negative mean squared error for GridSearchCV)\n",
        "scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "\n",
        "# Initialize GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, scoring=scorer, cv=KFold(n_splits=5, shuffle=True, random_state=42))\n",
        "\n",
        "# Fit the model to the training data and perform grid search\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Get the best hyperparameters\n",
        "best_params = grid_search.best_params_\n",
        "\n",
        "# Make predictions on the test set using the best model\n",
        "best_model = grid_search.best_estimator_\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the best model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Display the best hyperparameters and evaluation metrics\n",
        "print(\"Best Hyperparameters:\", best_params)\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
        "print(\"R-squared (R2):\", r2)\n"
      ],
      "metadata": {
        "id": "dbUXli194GBd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import lightgbm as lgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Assuming X_train, X_test, y_train, and y_test are already defined\n",
        "\n",
        "# Split the data into training and validation sets\n",
        "X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n",
        "    X_train, y_train, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Initialize the LightGBM model with early stopping\n",
        "model = lgb.LGBMRegressor(\n",
        "    n_estimators=1000,  # Set a large value, early stopping will prevent overfitting\n",
        "    learning_rate=0.1,\n",
        "    early_stopping_rounds=50,  # Adjust as needed\n",
        "    verbose=1  # Adjust verbosity level (0: silent, 1: progress bar, 2: one line per iteration)\n",
        ")\n",
        "\n",
        "# Train the model\n",
        "model.fit(\n",
        "    X_train_split, y_train_split,\n",
        "    eval_set=[(X_val_split, y_val_split)],\n",
        "    eval_metric='mse',  # Use the appropriate metric\n",
        ")\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Display evaluation metrics\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
        "print(\"R-squared (R2):\", r2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IhQEsl-UjtR2",
        "outputId": "96eedb66-35ff-42a3-f341-984a59d437a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] early_stopping_round is set=50, early_stopping_rounds=50 will be ignored. Current value: early_stopping_round=50\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000143 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 1150\n",
            "[LightGBM] [Info] Number of data points in the train set: 1064, number of used features: 69\n",
            "[LightGBM] [Warning] early_stopping_round is set=50, early_stopping_rounds=50 will be ignored. Current value: early_stopping_round=50\n",
            "[LightGBM] [Info] Start training from score 628421110.683545\n",
            "Training until validation scores don't improve for 50 rounds\n",
            "Did not meet early stopping. Best iteration is:\n",
            "[993]\tvalid_0's l2: 4.49696e+17\n",
            "Mean Squared Error (MSE): 3.41566728354593e+17\n",
            "Root Mean Squared Error (RMSE): 584437103.8483038\n",
            "R-squared (R2): 0.8038908945971361\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.predict(one_hot_encoded_df_test)"
      ],
      "metadata": {
        "id": "yLL5S0YnHsU1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Assuming X_train, X_test, y_train, and y_test are already defined\n",
        "\n",
        "# Split the data into training and validation sets\n",
        "X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n",
        "    X_train, y_train, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Initialize the XGBoost model with early stopping\n",
        "model = xgb.XGBRegressor(\n",
        "    n_estimators=1000,  # Set a large value, early stopping will prevent overfitting\n",
        "    learning_rate=0.1,\n",
        "    early_stopping_rounds=50,  # Adjust as needed\n",
        "    verbose=1  # Adjust verbosity level (0: silent, 1: progress bar)\n",
        ")\n",
        "\n",
        "# Train the model\n",
        "model.fit(\n",
        "    X_train_split, y_train_split,\n",
        "    eval_set=[(X_val_split, y_val_split)],\n",
        "    eval_metric='rmse',  # Use the appropriate metric\n",
        ")\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Display evaluation metrics\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
        "print(\"R-squared (R2):\", r2)\n"
      ],
      "metadata": {
        "id": "4EwRgXx02c1a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "oDsIQZDMeGAu"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}